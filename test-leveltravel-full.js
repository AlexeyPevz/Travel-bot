import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const apiKey = process.env.LEVELTRAVEL_API_KEY;
const partnerId = process.env.LEVEL_TRAVEL_PARTNER;

console.log('üîë API Key:', apiKey ? `${apiKey.substring(0, 10)}...` : 'NOT SET');
console.log('ü§ù Partner ID:', partnerId || 'NOT SET');
console.log('---\n');

async function testLevelTravelAPI() {
  const headers = {
    'Authorization': `Token token="${apiKey}"`,
    'Accept': 'application/vnd.leveltravel.v3',
    'Content-Type': 'application/json'
  };

  try {
    // 1. –¢–µ—Å—Ç references/departures - –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –≤—ã–ª–µ—Ç–∞...');
    const departuresResponse = await axios.get(
      'https://api.level.travel/references/departures',
      { headers, validateStatus: () => true }
    );
    
    console.log('–°—Ç–∞—Ç—É—Å:', departuresResponse.status);
    if (departuresResponse.status === 200) {
      const cities = departuresResponse.data.slice(0, 5);
      console.log('–ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ –≤—ã–ª–µ—Ç–∞:');
      cities.forEach(city => {
        console.log(`  - ${city.name_ru} (${city.iata})`);
      });
    } else {
      console.log('–û—à–∏–±–∫–∞:', departuresResponse.data);
    }
    console.log('---\n');

    // 2. –¢–µ—Å—Ç references/countries - —Å—Ç—Ä–∞–Ω—ã
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω...');
    const countriesResponse = await axios.get(
      'https://api.level.travel/references/countries', 
      { headers, validateStatus: () => true }
    );
    
    console.log('–°—Ç–∞—Ç—É—Å:', countriesResponse.status);
    if (countriesResponse.status === 200) {
      const countries = countriesResponse.data.slice(0, 5);
      console.log('–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω:');
      countries.forEach(country => {
        console.log(`  - ${country.name_ru} (${country.iso2})`);
      });
    }
    console.log('---\n');

    // 3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ (–¢—É—Ä—Ü–∏—è, 7 –Ω–æ—á–µ–π)...');
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    const searchParams = {
      from_city: 'Moscow',
      to_country: 'TR',
      nights: 7,
      adults: 2,
      start_date: '25.01.2025'
    };
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', searchParams);
    
    const enqueueResponse = await axios.post(
      'https://api.level.travel/search/enqueue',
      searchParams,
      { headers, validateStatus: () => true }
    );
    
    console.log('–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞:', enqueueResponse.status);
    
    if (enqueueResponse.status === 200 && enqueueResponse.data.success) {
      const requestId = enqueueResponse.data.request_id;
      console.log('ID –ø–æ–∏—Å–∫–∞:', requestId);
      
      // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
      console.log('–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      const statusResponse = await axios.get(
        `https://api.level.travel/search/status?request_id=${requestId}`,
        { headers, validateStatus: () => true }
      );
      
      console.log('–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', statusResponse.data);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª–∏
      if (statusResponse.data.status === 'finished') {
        const hotelsResponse = await axios.get(
          `https://api.level.travel/search/get_grouped_hotels?request_id=${requestId}`,
          { headers, validateStatus: () => true }
        );
        
        if (hotelsResponse.status === 200 && hotelsResponse.data.hotels) {
          console.log(`–ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π: ${hotelsResponse.data.hotels.length}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–µ–ª—å
          const firstHotel = hotelsResponse.data.hotels[0];
          if (firstHotel) {
            console.log('\n–ü—Ä–∏–º–µ—Ä –æ—Ç–µ–ª—è:');
            console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${firstHotel.name}`);
            console.log(`  –ó–≤–µ–∑–¥—ã: ${firstHotel.stars}‚≠ê`);
            console.log(`  –¶–µ–Ω–∞ –æ—Ç: ${firstHotel.min_price} ‚ÇΩ`);
            console.log(`  –†–µ–π—Ç–∏–Ω–≥: ${firstHotel.rating || '–Ω–µ—Ç'}`);
            console.log(`  ID: ${firstHotel.id}`);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
            const affiliateUrl = process.env.LEVEL_TRAVEL_AFFILIATE_URL || 'https://level.travel';
            const marker = process.env.LEVEL_TRAVEL_MARKER || partnerId;
            
            console.log('\nüîó –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:');
            if (affiliateUrl.includes('level.tpx.lt')) {
              console.log(`${affiliateUrl}&hotel_id=${firstHotel.id}&marker=${marker}`);
            } else {
              console.log(`https://level.travel/hotels/${firstHotel.id}?partner_id=${partnerId}`);
            }
          }
        }
      }
    } else {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞:', enqueueResponse.data);
    }
    console.log('---\n');

    // 4. –¢–µ—Å—Ç hot tours - –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤...');
    const hotToursResponse = await axios.get(
      'https://api.level.travel/hot_tours',
      { 
        headers, 
        params: {
          from_city: 'Moscow',
          to_country: 'TR',
          nights_from: 7,
          nights_to: 10,
          adults: 2,
          limit: 5
        },
        validateStatus: () => true 
      }
    );
    
    console.log('–°—Ç–∞—Ç—É—Å:', hotToursResponse.status);
    if (hotToursResponse.status === 200 && hotToursResponse.data.hot_tours) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤: ${hotToursResponse.data.hot_tours.length}`);
      const firstHot = hotToursResponse.data.hot_tours[0];
      if (firstHot) {
        console.log('\n–ü—Ä–∏–º–µ—Ä –≥–æ—Ä—è—â–µ–≥–æ —Ç—É—Ä–∞:');
        console.log(`  –û—Ç–µ–ª—å: ${firstHot.hotel_name}`);
        console.log(`  –¶–µ–Ω–∞: ${firstHot.price} ‚ÇΩ`);
        console.log(`  –°–∫–∏–¥–∫–∞: ${firstHot.discount}%`);
        console.log(`  –î–∞—Ç–∞: ${firstHot.date}`);
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testLevelTravelAPI();