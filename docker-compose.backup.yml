version: '3.8'

# Backup service for production
# Usage: docker-compose -f docker-compose.yml -f docker-compose.backup.yml up -d

services:
  # PostgreSQL backup service
  postgres-backup:
    image: postgres:16-alpine
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://tourtinder:tourtinder123@postgres:5432/tourtinder}
      - BACKUP_DIR=/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - WEBHOOK_URL=${BACKUP_WEBHOOK_URL}
    volumes:
      - ./scripts/backup-db.sh:/backup-db.sh:ro
      - postgres_backups:/backups
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/sh
    command: |
      -c "
      # Install AWS CLI if S3 is configured
      if [ ! -z \"\$$S3_BUCKET\" ]; then
        apk add --no-cache aws-cli
      fi
      
      # Install cron
      apk add --no-cache dcron
      
      # Create cron job for daily backups at 2 AM
      echo '0 2 * * * /backup-db.sh >> /var/log/backup.log 2>&1' > /etc/crontabs/root
      
      # Run initial backup
      /backup-db.sh
      
      # Start cron daemon
      crond -f -l 8
      "
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    networks:
      - default

  # Backup monitoring (optional)
  backup-monitor:
    image: alpine:latest
    volumes:
      - postgres_backups:/backups:ro
    entrypoint: /bin/sh
    command: |
      -c "
      while true; do
        echo '=== Backup Status ==='
        echo 'Last 5 backups:'
        ls -lah /backups/*.sql.gz 2>/dev/null | tail -5 || echo 'No backups found'
        echo ''
        echo 'Backup directory size:'
        du -sh /backups 2>/dev/null || echo '0'
        echo ''
        sleep 3600
      done
      "
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_backups:
    driver: local

# To enable S3 backups, set these environment variables:
# - S3_BUCKET: Your S3 bucket name
# - AWS_ACCESS_KEY_ID: Your AWS access key
# - AWS_SECRET_ACCESS_KEY: Your AWS secret key
# - S3_ENDPOINT: (Optional) Custom S3 endpoint for S3-compatible services

# To enable webhook notifications, set:
# - BACKUP_WEBHOOK_URL: Slack/Discord/etc webhook URL