user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging with staging prefix
    log_format staging '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time" '
                      'staging=1';

    access_log /var/log/nginx/access.log staging;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;

    # Security headers for staging
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Environment "staging" always;

    # Rate limiting zones for staging (higher limits)
    limit_req_zone $binary_remote_addr zone=api_staging:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth_staging:10m rate=10r/m;
    limit_conn_zone $binary_remote_addr zone=addr_staging:10m;

    # Upstream configuration
    upstream app_staging {
        least_conn;
        server app-staging:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Staging server configuration
    server {
        listen 80;
        server_name staging.localhost staging.*;

        # Basic authentication for staging (optional)
        # auth_basic "Staging Environment";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        # Rate limiting
        limit_req zone=api_staging burst=50 nodelay;
        limit_conn addr_staging 100;

        # Staging banner
        add_header X-Staging-Notice "This is a staging environment. Data may be reset at any time." always;

        # Health check endpoint (no auth)
        location /health {
            auth_basic off;
            proxy_pass http://app_staging/api/health;
            access_log off;
        }

        # API routes
        location /api/ {
            proxy_pass http://app_staging;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment staging;
            proxy_cache_bypass $http_upgrade;

            # Timeouts for staging (longer for debugging)
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # CORS headers for staging (more permissive)
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRF-Token';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # WebSocket support
        location /ws {
            proxy_pass http://app_staging;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Environment staging;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static files (if any)
        location /static/ {
            alias /app/static/;
            expires 1h;
            add_header Cache-Control "public, immutable";
        }

        # Frontend routes
        location / {
            proxy_pass http://app_staging;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Environment staging;
        }

        # Debug endpoints (staging only)
        location /debug/ {
            # Extra authentication for debug endpoints
            # auth_basic "Debug Access";
            # auth_basic_user_file /etc/nginx/.htpasswd.debug;
            
            proxy_pass http://app_staging;
            proxy_set_header X-Debug-Mode "true";
            
            # Only allow from specific IPs (optional)
            # allow 10.0.0.0/8;
            # allow 172.16.0.0/12;
            # allow 192.168.0.0/16;
            # deny all;
        }

        # Metrics endpoint (for Prometheus)
        location /metrics {
            proxy_pass http://app_staging/metrics;
            
            # Restrict access to monitoring systems
            # allow 10.0.0.0/8;
            # deny all;
        }

        # Error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            add_header X-Environment "staging" always;
        }
    }

    # Redirect non-staging domains to staging subdomain
    server {
        listen 80 default_server;
        server_name _;
        return 301 http://staging.$host$request_uri;
    }
}