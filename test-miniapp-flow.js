import dotenv from 'dotenv';
dotenv.config();

// –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
class SimpleDeduplicationService {
  normalizeHotelName(name) {
    return name
      .toLowerCase()
      .replace(/\s+/g, ' ')
      .replace(/hotel|–æ—Ç–µ–ª—å|resort|—Ä–µ–∑–æ—Ä—Ç|spa|—Å–ø–∞/gi, '')
      .replace(/[^\w\s\u0400-\u04FF]/g, '')
      .trim();
  }

  calculateSimilarity(str1, str2) {
    const s1 = str1.toLowerCase().trim();
    const s2 = str2.toLowerCase().trim();
    if (s1 === s2) return 1;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
    const words1 = s1.split(' ');
    const words2 = s2.split(' ');
    const commonWords = words1.filter(w => words2.includes(w)).length;
    return commonWords / Math.max(words1.length, words2.length);
  }

  isMatchingHotel(tour1, tour2) {
    const norm1 = this.normalizeHotelName(tour1.hotel);
    const norm2 = this.normalizeHotelName(tour2.hotel);
    
    if (norm1 === norm2) {
      return { confidence: 0.9, reason: 'exact_name_match' };
    }
    
    const similarity = this.calculateSimilarity(tour1.hotel, tour2.hotel);
    const sameStars = tour1.hotelStars === tour2.hotelStars;
    const sameCity = tour1.destination === tour2.destination;
    
    if (similarity > 0.7 && sameStars && sameCity) {
      return { confidence: 0.8, reason: 'high_similarity' };
    }
    
    return { confidence: 0, reason: 'no_match' };
  }

  groupToursByHotel(tours) {
    const hotelGroups = new Map();
    const processed = new Set();
    
    tours.forEach((tour, index) => {
      if (processed.has(index)) return;
      
      const group = [tour];
      processed.add(index);
      
      tours.forEach((otherTour, otherIndex) => {
        if (processed.has(otherIndex)) return;
        
        const match = this.isMatchingHotel(tour, otherTour);
        if (match.confidence > 0.7) {
          group.push(otherTour);
          processed.add(otherIndex);
          console.log(`\nüîó –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –æ—Ç–µ–ª–∏: "${tour.hotel}" –∏ "${otherTour.hotel}"`);
          console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(match.confidence * 100).toFixed(0)}%`);
          console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${match.reason}`);
        }
      });
      
      const hotelKey = this.normalizeHotelName(tour.hotel) + '_' + tour.hotelStars;
      hotelGroups.set(hotelKey, group);
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∏ MiniApp
    const cards = [];
    hotelGroups.forEach((group) => {
      const primaryTour = group[0];
      
      const card = {
        hotel: {
          id: `hotel_${primaryTour.hotel.replace(/\s+/g, '_')}`,
          name: primaryTour.hotel,
          stars: primaryTour.hotelStars || 0,
          location: {
            country: primaryTour.destination,
            city: primaryTour.arrivalCity || primaryTour.destination
          },
          rating: {
            overall: Math.max(...group.map(t => t.rating || 0))
          },
          reviews: {
            count: group.reduce((sum, t) => sum + (t.reviewsCount || 0), 0)
          },
          features: {
            wifi: group.some(t => t.hasWifi),
            pool: group.some(t => t.hasPool),
            beach: {
              distance: Math.min(...group.map(t => t.beachDistance || 1000).filter(d => d !== null)),
              firstLine: group.some(t => t.beachDistance && t.beachDistance < 100)
            },
            kidsClub: group.some(t => t.hasKidsClub)
          },
          images: [...new Set(group.flatMap(t => t.images || []))]
        },
        options: group.map(tour => ({
          id: tour.externalId,
          provider: tour.provider,
          price: tour.price,
          priceOld: tour.priceOld,
          currency: 'RUB',
          startDate: tour.startDate,
          endDate: tour.endDate,
          nights: tour.nights,
          meal: { code: 'AI', name: tour.mealType },
          bookingLink: tour.link
        })),
        priceRange: {
          min: Math.min(...group.map(t => t.price)),
          max: Math.max(...group.map(t => t.price)),
          currency: 'RUB'
        },
        badges: []
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂–∏
      if (group.some(t => t.isHot)) {
        card.badges.push({ type: 'hot', text: '–ì–æ—Ä—è—â–∏–π —Ç—É—Ä', color: '#ff4444' });
      }
      if (group.some(t => t.priceOld && t.priceOld > t.price)) {
        const maxDiscount = Math.max(...group.map(t => 
          t.priceOld ? Math.round((1 - t.price / t.priceOld) * 100) : 0
        ));
        if (maxDiscount > 0) {
          card.badges.push({ type: 'discount', text: `-${maxDiscount}%`, color: '#44ff44' });
        }
      }
      
      cards.push(card);
    });
    
    return cards;
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const testTours = [
  // Level.Travel
  {
    provider: 'leveltravel',
    externalId: 'lt-123',
    title: 'Rixos Premium Belek 5‚òÖ',
    hotel: 'Rixos Premium Belek',
    hotelStars: 5,
    destination: '–¢—É—Ä—Ü–∏—è',
    arrivalCity: '–ë–µ–ª–µ–∫',
    price: 150000,
    priceOld: 180000,
    rating: 4.8,
    reviewsCount: 1250,
    beachDistance: 50,
    hasWifi: true,
    hasPool: true,
    hasKidsClub: true,
    images: ['https://example.com/rixos1.jpg', 'https://example.com/rixos2.jpg'],
    startDate: new Date('2024-06-01'),
    endDate: new Date('2024-06-08'),
    nights: 7,
    mealType: '–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ',
    link: 'https://level.tpx.lt/zWmCtpHX&hotel_id=123'
  },
  
  // Travelata - —Ç–æ—Ç –∂–µ –æ—Ç–µ–ª—å, –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  {
    provider: 'travelata',
    externalId: 'tv-456',
    title: '–†–∏–∫—Å–æ—Å –ü—Ä–µ–º–∏—É–º –ë–µ–ª–µ–∫',
    hotel: '–†–∏–∫—Å–æ—Å –ü—Ä–µ–º–∏—É–º –ë–µ–ª–µ–∫',
    hotelStars: 5,
    destination: '–¢—É—Ä—Ü–∏—è',
    arrivalCity: '–ë–µ–ª–µ–∫',
    price: 145000,
    rating: 4.7,
    reviewsCount: 890,
    beachDistance: 60,
    hasWifi: true,
    hasPool: true,
    images: ['https://example.com/rixos3.jpg'],
    startDate: new Date('2024-06-01'),
    endDate: new Date('2024-06-08'),
    nights: 7,
    mealType: '–£–ª—å—Ç—Ä–∞ –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ',
    link: 'https://travelata.ru/hotel/456'
  },
  
  // Level.Travel - –¥—Ä—É–≥–æ–π –æ—Ç–µ–ª—å
  {
    provider: 'leveltravel',
    externalId: 'lt-789',
    title: 'Titanic Beach Lara 5‚òÖ',
    hotel: 'Titanic Beach Lara',
    hotelStars: 5,
    destination: '–¢—É—Ä—Ü–∏—è',
    arrivalCity: '–ê–Ω—Ç–∞–ª—å—è',
    price: 120000,
    priceOld: 140000,
    rating: 4.6,
    reviewsCount: 2100,
    beachDistance: 0,
    hasWifi: true,
    hasPool: true,
    hasAquapark: true,
    isHot: true,
    images: ['https://example.com/titanic1.jpg'],
    startDate: new Date('2024-06-01'),
    endDate: new Date('2024-06-08'),
    nights: 7,
    mealType: '–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ',
    link: 'https://level.tpx.lt/zWmCtpHX&hotel_id=789'
  },
  
  // Sletat - –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è
  {
    provider: 'sletat',
    externalId: 'sl-111',
    title: 'RIXOS PREMIUM BELEK',
    hotel: 'RIXOS PREMIUM BELEK',
    hotelStars: 5,
    destination: '–¢—É—Ä—Ü–∏—è',
    arrivalCity: '–ë–µ–ª–µ–∫',
    price: 155000,
    rating: 4.9,
    reviewsCount: 450,
    beachDistance: 50,
    hasWifi: true,
    hasPool: true,
    hasKidsClub: true,
    instantConfirm: true,
    images: ['https://example.com/rixos4.jpg'],
    startDate: new Date('2024-06-02'),
    endDate: new Date('2024-06-09'),
    nights: 7,
    mealType: '–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ',
    link: 'https://sletat.ru/hotel/111'
  }
];

console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: API ‚Üí –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è ‚Üí Mini App\n');
console.log('üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤):');
console.log(`–í—Å–µ–≥–æ —Ç—É—Ä–æ–≤: ${testTours.length}`);
testTours.forEach(tour => {
  console.log(`- ${tour.provider}: "${tour.hotel}" (${tour.hotelStars}‚òÖ) - ${tour.price} —Ä—É–±`);
});

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
const deduplicationService = new SimpleDeduplicationService();

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—É—Ä—ã
console.log('\nüîÄ –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:');
const miniAppCards = deduplicationService.groupToursByHotel(testTours);

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Mini App
console.log('\nüì± –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Mini App:');
console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π: ${miniAppCards.length}\n`);

miniAppCards.forEach((card, idx) => {
  console.log(`${idx + 1}. ${card.hotel.name} ${card.hotel.stars}‚òÖ`);
  console.log(`   üìç ${card.hotel.location.city}, ${card.hotel.location.country}`);
  console.log(`   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${card.hotel.rating.overall} (${card.hotel.reviews.count} –æ—Ç–∑—ã–≤–æ–≤)`);
  console.log(`   üí∞ –¶–µ–Ω—ã: ${card.priceRange.min} - ${card.priceRange.max} —Ä—É–±`);
  console.log(`   üìä –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${card.options.length} –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${card.options.map(o => o.provider).join(', ')}`);
  
  if (card.hotel.features.beach.firstLine) {
    console.log(`   üèñÔ∏è –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –ø–ª—è–∂–∞!`);
  }
  
  if (card.badges.length > 0) {
    console.log(`   üè∑Ô∏è –ë–µ–π–¥–∂–∏: ${card.badges.map(b => b.text).join(', ')}`);
  }
  
  console.log(`   üîó –í–∞—Ä–∏–∞–Ω—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  card.options.forEach(option => {
    const discount = option.priceOld ? ` (–±—ã–ª–æ ${option.priceOld})` : '';
    console.log(`      - ${option.provider}: ${option.price} —Ä—É–±${discount}`);
  });
  
  console.log('');
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Mini App
console.log('‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Mini App:');
console.log('- –û—Ç–µ–ª–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏');
console.log('- –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
console.log('- –¶–µ–Ω—ã, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã');
console.log('- –î–æ–±–∞–≤–ª–µ–Ω—ã –±–µ–π–¥–∂–∏ –¥–ª—è –≥–æ—Ä—è—â–∏—Ö —Ç—É—Ä–æ–≤ –∏ —Å–∫–∏–¥–æ–∫');
console.log('- –í—Å–µ —Å—Å—ã–ª–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');

// –ü—Ä–∏–º–µ—Ä JSON –¥–ª—è Mini App
console.log('\nüìÑ –ü—Ä–∏–º–µ—Ä JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è:');
console.log(JSON.stringify(miniAppCards[0], null, 2));