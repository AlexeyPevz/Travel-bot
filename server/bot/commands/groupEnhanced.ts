import TelegramBot from 'node-telegram-bot-api';
import { db } from '../../../db';
import { groupProfiles, profiles, tours, groupTourVotes } from '@shared/schema';
import { eq, and, inArray } from 'drizzle-orm';
import { 
  createOrUpdateGroupProfile, 
  aggregateGroupProfiles,
  checkGroupMembersProfiles,
  handleGroupVote,
  sendVotingSummary
} from '../../services/groups';
import logger from '../../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /groupsetup —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
export async function handleGroupSetup(
  bot: TelegramBot,
  msg: TelegramBot.Message
): Promise<void> {
  const chatId = msg.chat.id;
  const userId = msg.from?.id.toString();
  const chatTitle = msg.chat.title || '–ì—Ä—É–ø–ø–∞';
  
  if (!userId) return;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if (msg.chat.type === 'private') {
      await bot.sendMessage(
        chatId,
        '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.\n\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const chatMember = await bot.getChatMember(chatId, parseInt(userId));
    const isAdmin = ['administrator', 'creator'].includes(chatMember.status);
    
    if (!isAdmin) {
      await bot.sendMessage(
        chatId,
        '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∏—Å–∫.'
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const chatMembersCount = await bot.getChatMembersCount(chatId);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    const groupId = await createOrUpdateGroupProfile(
      chatId.toString(),
      chatTitle,
      [] // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    );
    
    await bot.sendMessage(
      chatId,
      `‚úÖ **–ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**\n\n` +
      `üìç –ì—Ä—É–ø–ø–∞: ${chatTitle}\n` +
      `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ: ${chatMembersCount}\n\n` +
      `**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n` +
      `1Ô∏è‚É£ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n` +
      `2Ô∏è‚É£ –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –∏ –Ω–∞–∂–∞—Ç—å "–Ø –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É"\n` +
      `3Ô∏è‚É£ –ö–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –º—ã –Ω–∞–π–¥–µ–º —Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç—Ä–æ—è—Ç –≤—Å–µ—Ö!\n\n` +
      `**–í–∞–∂–Ω–æ:** –ë–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
              url: `https://t.me/${(await bot.getMe()).username}?start=group_${chatId}`
            }],
            [{
              text: '‚úÖ –Ø –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É',
              callback_data: `group_ready_${groupId}`
            }],
            [{
              text: 'üë• –ö—Ç–æ –≥–æ—Ç–æ–≤?',
              callback_data: `group_status_${groupId}`
            }]
          ]
        }
      }
    );
  } catch (error) {
    logger.error('Error in group setup:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
 */
export async function handleGroupReady(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const userId = callbackQuery.from.id.toString();
  const userName = callbackQuery.from.first_name;
  const data = callbackQuery.data;
  
  if (!chatId || !data) return;
  
  try {
    const groupId = parseInt(data.split('_')[2]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å
    const [userProfile] = await db.select()
      .from(profiles)
      .where(eq(profiles.userId, userId))
      .limit(1);
    
    if (!userProfile) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!',
        show_alert: true
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    const [group] = await db.select()
      .from(groupProfiles)
      .where(eq(groupProfiles.id, groupId))
      .limit(1);
    
    if (!group) return;
    
    const memberIds = (group.memberIds as string[]) || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    if (memberIds.includes(userId)) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! ‚úÖ'
      });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    memberIds.push(userId);
    await db.update(groupProfiles)
      .set({
        memberIds,
        updatedAt: new Date()
      })
      .where(eq(groupProfiles.id, groupId));
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∏—Å–∫! ‚úÖ'
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      `‚úÖ ${userName} –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É!\n\n` +
      `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–æ: ${memberIds.length}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤',
              callback_data: `group_search_${groupId}`
            }],
            [{
              text: 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
              callback_data: `group_members_${groupId}`
            }]
          ]
        }
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await aggregateGroupProfiles(groupId);
    
  } catch (error) {
    logger.error('Error handling group ready:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      show_alert: true
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã
 */
export async function handleGroupStatus(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const data = callbackQuery.data;
  
  if (!chatId || !data) return;
  
  try {
    const groupId = parseInt(data.split('_')[2]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    const [group] = await db.select()
      .from(groupProfiles)
      .where(eq(groupProfiles.id, groupId))
      .limit(1);
    
    if (!group) return;
    
    const memberIds = (group.memberIds as string[]) || [];
    
    if (memberIds.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É'
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const memberProfiles = await db.select()
      .from(profiles)
      .where(inArray(profiles.userId, memberIds));
    
    let statusMessage = `üìä **–°—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞**\n\n`;
    statusMessage += `‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É (${memberProfiles.length}):\n`;
    
    memberProfiles.forEach(profile => {
      statusMessage += `‚Ä¢ ${profile.name || '–£—á–∞—Å—Ç–Ω–∏–∫'}\n`;
    });
    
    if (group.aggregatedProfile) {
      const aggProfile = group.aggregatedProfile as any;
      statusMessage += `\nüìã **–û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n`;
      
      if (aggProfile.countries?.length > 0) {
        statusMessage += `üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${aggProfile.countries.join(', ')}\n`;
      }
      if (aggProfile.budget) {
        statusMessage += `üí∞ –û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${aggProfile.budget.toLocaleString('ru-RU')} ‚ÇΩ\n`;
      }
      if (aggProfile.tripDuration) {
        statusMessage += `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${aggProfile.tripDuration} –Ω–æ—á–µ–π\n`;
      }
    }
    
    await bot.sendMessage(chatId, statusMessage, {
      parse_mode: 'Markdown',
      reply_markup: memberIds.length >= 2 ? {
        inline_keyboard: [[{
          text: 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫',
          callback_data: `group_search_${groupId}`
        }]]
      } : undefined
    });
    
    await bot.answerCallbackQuery(callbackQuery.id);
    
  } catch (error) {
    logger.error('Error showing group status:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
    });
  }
}

/**
 * –ì—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
 */
export async function handleGroupSearch(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const data = callbackQuery.data;
  
  if (!chatId || !data) return;
  
  try {
    const groupId = parseInt(data.split('_')[2]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    const [group] = await db.select()
      .from(groupProfiles)
      .where(eq(groupProfiles.id, groupId))
      .limit(1);
    
    if (!group || !group.aggregatedProfile) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—ã',
        show_alert: true
      });
      return;
    }
    
    const memberIds = (group.memberIds as string[]) || [];
    
    if (memberIds.length < 2) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞',
        show_alert: true
      });
      return;
    }
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: 'üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...'
    });
    
    await bot.sendMessage(
      chatId,
      `üîé –ò—â—É —Ç—É—Ä—ã –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏–∑ ${memberIds.length} —á–µ–ª–æ–≤–µ–∫...\n\n` +
      `–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`
    );
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    // const tours = await searchTours(group.aggregatedProfile);
    
    // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    await bot.sendMessage(
      chatId,
      `‚úÖ –ù–∞–π–¥–µ–Ω–æ 5 —Ç—É—Ä–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!\n\n` +
      `–ö–∞–∂–¥—ã–π —Ç—É—Ä —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö ${memberIds.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`,
      {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üè® –¢—É—Ä 1: –¢—É—Ä—Ü–∏—è, 5‚≠ê',
              callback_data: `group_tour_1_${groupId}`
            }],
            [{
              text: 'üè® –¢—É—Ä 2: –ï–≥–∏–ø–µ—Ç, 4‚≠ê',
              callback_data: `group_tour_2_${groupId}`
            }],
            [{
              text: 'üè® –¢—É—Ä 3: –ì—Ä–µ—Ü–∏—è, 4‚≠ê',
              callback_data: `group_tour_3_${groupId}`
            }]
          ]
        }
      }
    );
    
  } catch (error) {
    logger.error('Error in group search:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ'
    });
  }
}

/**
 * –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç—É—Ä
 */
export async function handleGroupTourVote(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const userId = callbackQuery.from.id.toString();
  const userName = callbackQuery.from.first_name;
  const data = callbackQuery.data;
  
  if (!chatId || !data) return;
  
  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: group_vote_yes_tourId_groupId
    const parts = data.split('_');
    const vote = parts[2] as 'yes' | 'no' | 'maybe';
    const tourId = parseInt(parts[3]);
    const groupId = parseInt(parts[4]);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    const voteCount = await handleGroupVote(groupId, tourId, userId, vote);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: `–í–∞—à –≥–æ–ª–æ—Å "${vote === 'yes' ? '‚úÖ' : vote === 'no' ? '‚ùå' : 'ü§î'}" —É—á—Ç–µ–Ω!`
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      `${userName} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª!\n\n` +
      `–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
      `‚úÖ –ó–∞: ${voteCount.yes}\n` +
      `‚ùå –ü—Ä–æ—Ç–∏–≤: ${voteCount.no}\n` +
      `ü§î –ù–µ —É–≤–µ—Ä–µ–Ω: ${voteCount.maybe}`
    );
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    const [group] = await db.select()
      .from(groupProfiles)
      .where(eq(groupProfiles.id, groupId))
      .limit(1);
    
    const totalVotes = voteCount.yes + voteCount.no + voteCount.maybe;
    const totalMembers = (group?.memberIds as string[])?.length || 0;
    
    if (totalVotes >= totalMembers && totalMembers > 0) {
      await sendVotingSummary(bot, chatId.toString(), groupId, tourId);
    }
    
  } catch (error) {
    logger.error('Error handling vote:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
 */
export async function showGroupTourCard(
  bot: TelegramBot,
  chatId: number,
  tour: any,
  groupId: number
): Promise<void> {
  const tourMessage = `
üè® **${tour.hotel}** ${tour.hotelStars}‚≠ê
üìç ${tour.destination}
üí∞ ${tour.price.toLocaleString('ru-RU')} ‚ÇΩ –Ω–∞ –≤—Å–µ—Ö
üìÖ ${tour.nights} –Ω–æ—á–µ–π
üçΩ ${tour.mealType}

${tour.description || ''}

_–ì–æ–ª–æ—Å—É–π—Ç–µ, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤—Å–µ—Ö:_
`;

  await bot.sendMessage(chatId, tourMessage, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç', callback_data: `group_vote_yes_${tour.id}_${groupId}` },
          { text: '‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', callback_data: `group_vote_no_${tour.id}_${groupId}` },
          { text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω', callback_data: `group_vote_maybe_${tour.id}_${groupId}` }
        ],
        [
          { text: 'üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url: tour.link }
        ]
      ]
    }
  });
}