import { BaseCommand, CommandContext } from './base';
import { storage } from '../../storage';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /myrequests - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class MyRequestsCommand extends BaseCommand {
  name = 'myrequests';
  description = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã';
  usage = '/myrequests';

  protected async executeCommand(ctx: CommandContext): Promise<void> {
    const { bot, chatId, userId } = ctx;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const profile = await storage.getProfile(userId);
      
      if (!profile) {
        await this.sendMessage(
          bot,
          chatId,
          '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ watchlists
      const watchlists = await storage.getWatchlists(userId);
      
      if (watchlists.length === 0) {
        await this.sendMessage(
          bot,
          chatId,
          '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
          {
            reply_markup: {
              inline_keyboard: [[
                { 
                  text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 
                  web_app: { 
                    url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/watchlist` 
                  } 
                }
              ]]
            }
          }
        );
        return;
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º watchlists
      let message = 'üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*\n\n';
      
      watchlists.forEach((watchlist, index) => {
        message += `*${index + 1}. ${watchlist.destination}*\n`;
        message += `   üí∞ –ë—é–¥–∂–µ—Ç: ${watchlist.budget ? `${this.formatNumber(watchlist.budget)} ‚ÇΩ` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${watchlist.tripDuration || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –¥–Ω–µ–π\n`;
        message += `   ‚úÖ –°—Ç–∞—Ç—É—Å: ${watchlist.active ? '–∞–∫—Ç–∏–≤–Ω—ã–π' : '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
        
        if (watchlist.deadline) {
          const daysLeft = Math.floor((new Date(watchlist.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
          message += `   ‚è∞ –°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è: ${daysLeft > 0 ? `–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π` : '–∏—Å—Ç–µ–∫'}\n`;
        }
        
        message += '\n';
      });
      
      await this.sendMessage(bot, chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { 
              text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏', 
              web_app: { 
                url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/watchlist` 
              } 
            }
          ]]
        }
      });
    } catch (error) {
      await this.sendError(bot, chatId, error as Error);
    }
  }
}