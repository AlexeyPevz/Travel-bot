import TelegramBot from 'node-telegram-bot-api';
import { 
  createBackgroundSearch, 
  getUserBackgroundSearches,
  pauseBackgroundSearch,
  resumeBackgroundSearch,
  stopBackgroundSearch
} from '../../services/background-search';
import { NotifyConditions } from '@shared/schema-v2';
import logger from '../../utils/logger';
import { setUserState, getUserState } from '../fsm';

/**
 * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∫–ª—é—á–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function offerBackgroundSearch(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  searchRequestId: number
) {
  const message = `üîî **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—É—Ä–∞—Ö?**

–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ:
‚Ä¢ üÜï –ù–æ–≤—ã—Ö —Ç—É—Ä–∞—Ö –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
‚Ä¢ üí∞ –°–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ—Ç–µ–ª–∏
‚Ä¢ ‚úÖ –ü–æ—è–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Ç–µ–ª—è—Ö

_–§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è._`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: `enable_bg_search_${searchRequestId}` }
        ],
        [
          { text: '‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', callback_data: 'skip_bg_search' }
        ]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function handleEnableBackgroundSearch(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  searchRequestId: number
) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
  setUserState(userId, {
    state: 'BG_SEARCH_SETUP' as any,
    backgroundSearchSetup: {
      searchRequestId,
      step: 'duration'
    }
  });

  await bot.sendMessage(
    chatId,
    `üìÖ –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—É—Ä–∞–º–∏?\n\n_–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É_`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '1 –Ω–µ–¥–µ–ª—è', callback_data: 'bg_duration_7' },
            { text: '2 –Ω–µ–¥–µ–ª–∏', callback_data: 'bg_duration_14' },
            { text: '1 –º–µ—Å—è—Ü', callback_data: 'bg_duration_30' }
          ],
          [
            { text: '2 –º–µ—Å—è—Ü–∞', callback_data: 'bg_duration_60' },
            { text: '3 –º–µ—Å—è—Ü–∞', callback_data: 'bg_duration_90' }
          ],
          [
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bg_setup' }
          ]
        ]
      }
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export async function handleBackgroundSearchDuration(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  days: number
) {
  const state = getUserState(userId);
  if (!state?.backgroundSearchSetup) return;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  state.backgroundSearchSetup.monitorDays = days;
  state.backgroundSearchSetup.step = 'conditions';
  setUserState(userId, state);

  const message = `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏—Ç–µ, –æ —á–µ–º –≤–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å:`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üÜï –ù–æ–≤—ã–µ —Ç—É—Ä—ã', callback_data: 'bg_cond_new' },
          { text: 'üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω', callback_data: 'bg_cond_price' }
        ],
        [
          { text: '‚≠ê –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ (—Ç–æ–ø-3)', callback_data: 'bg_cond_top' },
          { text: 'üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã', callback_data: 'bg_cond_quiet' }
        ],
        [
          { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'bg_cond_done' }
        ],
        [
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_bg_setup' }
        ]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ª–æ–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function handleBackgroundSearchCondition(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  condition: string
) {
  const state = getUserState(userId);
  if (!state?.backgroundSearchSetup) return;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!state.backgroundSearchSetup.conditions) {
    state.backgroundSearchSetup.conditions = {
      notifyNewTours: true,
      priceDropPercent: 10,
      minMatchScore: 70
    };
  }

  let updateMessage = '';

  switch (condition) {
    case 'new':
      state.backgroundSearchSetup.conditions.notifyNewTours = 
        !state.backgroundSearchSetup.conditions.notifyNewTours;
      updateMessage = state.backgroundSearchSetup.conditions.notifyNewTours 
        ? '‚úÖ –ë—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–∞—Ö' 
        : '‚ùå –ù–µ –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–∞—Ö';
      break;

    case 'price':
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è
      state.backgroundSearchSetup.step = 'price_drop';
      setUserState(userId, state);
      
      await bot.sendMessage(
        chatId,
        'üí∞ –ü—Ä–∏ –∫–∞–∫–æ–º —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã —É–≤–µ–¥–æ–º–ª—è—Ç—å?',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '5%', callback_data: 'bg_price_5' },
                { text: '10%', callback_data: 'bg_price_10' },
                { text: '15%', callback_data: 'bg_price_15' }
              ],
              [
                { text: '20%', callback_data: 'bg_price_20' },
                { text: '–õ—é–±–æ–µ', callback_data: 'bg_price_1' }
              ],
              [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'bg_cond_back' }
              ]
            ]
          }
        }
      );
      return;

    case 'top':
      state.backgroundSearchSetup.conditions.onlyTopMatches = 
        !state.backgroundSearchSetup.conditions.onlyTopMatches;
      updateMessage = state.backgroundSearchSetup.conditions.onlyTopMatches 
        ? '‚≠ê –ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–ø-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞' 
        : 'üìã –ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã';
      break;

    case 'quiet':
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
      state.backgroundSearchSetup.step = 'quiet_hours';
      setUserState(userId, state);
      
      await bot.sendMessage(
        chatId,
        'üåô –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å?',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '22:00 - 09:00', callback_data: 'bg_quiet_22_9' },
                { text: '23:00 - 08:00', callback_data: 'bg_quiet_23_8' }
              ],
              [
                { text: '00:00 - 07:00', callback_data: 'bg_quiet_0_7' },
                { text: '–ù–µ –Ω—É–∂–Ω–æ', callback_data: 'bg_quiet_none' }
              ],
              [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'bg_cond_back' }
              ]
            ]
          }
        }
      );
      return;

    case 'done':
      // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
      await createBackgroundSearchFromState(bot, chatId, userId);
      return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  setUserState(userId, state);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (updateMessage) {
    await bot.answerCallbackQuery(state.callbackQueryId, {
      text: updateMessage,
      show_alert: false
    });
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
async function createBackgroundSearchFromState(
  bot: TelegramBot,
  chatId: number,
  userId: string
) {
  try {
    const state = getUserState(userId);
    if (!state?.backgroundSearchSetup) return;

    const { searchRequestId, monitorDays, conditions } = state.backgroundSearchSetup;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const monitorUntil = new Date();
    monitorUntil.setDate(monitorUntil.getDate() + (monitorDays || 30));

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    const backgroundSearchId = await createBackgroundSearch(
      searchRequestId,
      userId,
      monitorUntil,
      conditions as NotifyConditions
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setUserState(userId, { state: 'IDLE' as any });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmMessage = `‚úÖ **–§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ —Ç—É—Ä—ã ${getFrequencyText(conditions?.onlyTopMatches ? 'twice_daily' : 'daily')} –¥–æ ${monitorUntil.toLocaleDateString('ru-RU')}.

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞:
${conditions?.notifyNewTours ? '‚Ä¢ üÜï –ü–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—É—Ä—ã\n' : ''}${conditions?.priceDropPercent ? `‚Ä¢ üí∞ –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è –Ω–∞ ${conditions.priceDropPercent}% –∏–ª–∏ –±–æ–ª—å—à–µ\n` : ''}${conditions?.onlyTopMatches ? '‚Ä¢ ‚≠ê –¢–æ–ª—å–∫–æ –æ –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö (—Ç–æ–ø-3)\n' : ''}${conditions?.quietHours ? `‚Ä¢ üåô –ù–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å ${conditions.quietHours.start} –¥–æ ${conditions.quietHours.end}\n` : ''}

–£–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /notifications`;

    await bot.sendMessage(chatId, confirmMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: 'üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'my_notifications' }
        ]]
      }
    });

  } catch (error) {
    logger.error('Error creating background search:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤
 */
export async function showUserNotifications(
  bot: TelegramBot,
  chatId: number,
  userId: string
) {
  try {
    const searches = await getUserBackgroundSearches(userId);

    if (searches.length === 0) {
      await bot.sendMessage(
        chatId,
        'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤.\n\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –∏ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö!',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üîç –ù–∞–π—Ç–∏ —Ç—É—Ä—ã', callback_data: 'start_search' }
            ]]
          }
        }
      );
      return;
    }

    let message = `üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** (${searches.length})\n\n`;

    for (const { backgroundSearch, searchRequest } of searches) {
      const destination = searchRequest.destination?.join(', ') || '–õ—é–±–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
      const monitorUntil = new Date(backgroundSearch.monitorUntil);
      const isPaused = backgroundSearch.isPaused;
      
      message += `${isPaused ? '‚è∏' : 'üîî'} **${destination}**\n`;
      message += `   –î–æ: ${monitorUntil.toLocaleDateString('ru-RU')}\n`;
      message += `   –ü—Ä–æ–≤–µ—Ä–æ–∫: ${backgroundSearch.checksCount}\n`;
      message += `   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${backgroundSearch.notificationsCount}\n\n`;
    }

    const keyboard = searches.map(({ backgroundSearch }) => {
      const isPaused = backgroundSearch.isPaused;
      return [
        {
          text: isPaused ? '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å' : '‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
          callback_data: isPaused 
            ? `bg_resume_${backgroundSearch.id}`
            : `bg_pause_${backgroundSearch.id}`
        },
        {
          text: '‚ùå –£–¥–∞–ª–∏—Ç—å',
          callback_data: `bg_stop_${backgroundSearch.id}`
        }
      ];
    });

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (error) {
    logger.error('Error showing notifications:', error);
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
 */
export async function handleBackgroundSearchControl(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  action: 'pause' | 'resume' | 'stop',
  backgroundSearchId: number
) {
  try {
    let message = '';

    switch (action) {
      case 'pause':
        await pauseBackgroundSearch(backgroundSearchId, userId);
        message = '‚è∏ –§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        break;
      
      case 'resume':
        await resumeBackgroundSearch(backgroundSearchId, userId);
        message = '‚ñ∂Ô∏è –§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω';
        break;
      
      case 'stop':
        await stopBackgroundSearch(backgroundSearchId, userId);
        message = '‚ùå –§–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        break;
    }

    await bot.answerCallbackQuery(getUserState(userId)?.callbackQueryId || '', {
      text: message,
      show_alert: false
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await showUserNotifications(bot, chatId, userId);

  } catch (error) {
    logger.error('Error controlling background search:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function getFrequencyText(frequency: string): string {
  const frequencies: Record<string, string> = {
    'hourly': '–∫–∞–∂–¥—ã–π —á–∞—Å',
    'twice_daily': '–¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
    'daily': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
    'weekly': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
  };
  return frequencies[frequency] || frequency;
}