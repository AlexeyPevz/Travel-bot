import TelegramBot from 'node-telegram-bot-api';
import { parseTravelRequest, generateResponse, detectTravelStyle } from '../../services/ai-travel-assistant';
import { userProfiles, searchRequests, priorityProfiles } from '@shared/schema-v2';
import { db } from '@/db';
import { eq } from 'drizzle-orm';
import logger from '../../utils/logger';
import { setUserState, getUserState, FSM_STATES } from '../fsm';

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ AI –ø–æ–∏—Å–∫–∞
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
 */
export async function handleTestAiSearch(bot: TelegramBot, msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  const userId = msg.from?.id.toString();
  
  if (!userId) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º feature flag
  if (process.env.ENABLE_AI_PARSING !== 'true') {
    await bot.sendMessage(chatId, 'üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.');
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    let [userProfile] = await db.select()
      .from(userProfiles)
      .where(eq(userProfiles.userId, userId))
      .limit(1);

    if (!userProfile) {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      [userProfile] = await db.insert(userProfiles).values({
        userId,
        name: msg.from?.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        departureCity: '–ú–æ—Å–∫–≤–∞', // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –≥–æ—Ä–æ–¥
        language: msg.from?.language_code || 'ru'
      }).returning();
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è AI –ø–æ–∏—Å–∫–∞
    setUserState(userId, {
      state: 'AI_SEARCH_WAITING_TEXT' as any,
      searchData: {},
      aiSearchRequest: {
        id: null,
        stage: 'initial'
      }
    });

    const message = `ü§ñ *–ù–æ–≤—ã–π AI –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤* (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –æ—Ç–¥—ã—Ö –≤—ã –∏—â–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:

üí¨ _"–•–æ—á—É –≤ –¢—É—Ä—Ü–∏—é –≤ –∞–≤–≥—É—Å—Ç–µ –Ω–∞ –Ω–µ–¥–µ–ª—å–∫—É, –±—é–¥–∂–µ—Ç 150–∫ –Ω–∞ –¥–≤–æ–∏—Ö, —Å —Ä–µ–±–µ–Ω–∫–æ–º 5 –ª–µ—Ç"_

üí¨ _"–ò—â—É —Ç–∏—Ö–∏–π –æ—Ç–µ–ª—å 5 –∑–≤–µ–∑–¥ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ, –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ, 2 –Ω–µ–¥–µ–ª–∏ –≤ —Å–µ–Ω—Ç—è–±—Ä–µ"_

üí¨ _"–ù—É–∂–Ω–∞ –≤–∏–ª–ª–∞ —Å 3 —Å–ø–∞–ª—å–Ω—è–º–∏ –Ω–∞ –ö–∏–ø—Ä–µ, —Å –∫—É—Ö–Ω–µ–π –∏ –±–∞—Å—Å–µ–π–Ω–æ–º"_

–Ø –ø–æ–π–º—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç! ‚ú®`;

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_ai_search' }
        ]]
      }
    });

  } catch (error) {
    logger.error('Error in AI search command:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ /search');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ AI –ø–æ–∏—Å–∫–µ
 */
export async function handleAiSearchText(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
) {
  try {
    const state = getUserState(userId);
    if (!state?.aiSearchRequest) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    const processingMsg = await bot.sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [userProfile] = await db.select()
      .from(userProfiles)
      .where(eq(userProfiles.userId, userId))
      .limit(1);

    // –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI
    const parsed = await parseTravelRequest(text, userProfile, state.aiSearchRequest.context);

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ processing
    await bot.deleteMessage(chatId, processingMsg.message_id);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞
    const travelStyle = await detectTravelStyle(text);

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    const [priorityProfile] = await db.select()
      .from(priorityProfiles)
      .where(eq(priorityProfiles.name, travelStyle))
      .limit(1);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (parsed.missingRequired.length > 0) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç
      const response = await generateResponse(parsed, undefined, 'clarify');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      state.aiSearchRequest.context = {
        ...state.aiSearchRequest.context,
        lastParsed: parsed,
        clarificationStep: (state.aiSearchRequest.clarificationStep || 0) + 1
      };
      setUserState(userId, state);

      await bot.sendMessage(chatId, response.message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_ai_search' }
          ]]
        }
      });
      return;
    }

    // –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const [searchRequest] = await db.insert(searchRequests).values({
      userId,
      rawText: text,
      destination: parsed.destinations,
      dateType: parsed.dateType,
      startDate: parsed.startDate,
      endDate: parsed.endDate,
      flexibleMonth: parsed.flexibleMonth,
      duration: parsed.duration,
      budget: parsed.budget,
      budgetType: parsed.budgetType,
      currency: parsed.currency,
      adults: parsed.adults || 2,
      children: parsed.children || 0,
      childrenAges: parsed.childrenAges,
      roomPreferences: parsed.roomPreferences,
      requirements: parsed.requirements,
      priorities: {
        profileName: travelStyle,
        weights: {
          ...priorityProfile?.weights,
          ...parsed.suggestedPriorities
        }
      },
      status: 'ready'
    }).returning();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmResponse = await generateResponse(parsed, undefined, 'confirm');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let summary = `${confirmResponse.message}\n\n`;
    summary += `üìç **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: ${parsed.destinations?.join(', ') || '–õ—é–±–æ–µ'}\n`;
    
    if (parsed.startDate && parsed.endDate) {
      summary += `üìÖ **–î–∞—Ç—ã**: ${parsed.startDate.toLocaleDateString('ru-RU')} - ${parsed.endDate.toLocaleDateString('ru-RU')}\n`;
    } else if (parsed.flexibleMonth) {
      summary += `üìÖ **–ú–µ—Å—è—Ü**: ${parsed.flexibleMonth}\n`;
    }
    
    if (parsed.duration) {
      summary += `‚è± **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: ${parsed.duration} –Ω–æ—á–µ–π\n`;
    }
    
    summary += `üë• **–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏**: ${parsed.adults || 2} –≤–∑—Ä.`;
    if (parsed.children) {
      summary += `, ${parsed.children} –¥–µ—Ç. (${parsed.childrenAges?.join(', ')} –ª–µ—Ç)`;
    }
    summary += '\n';
    
    if (parsed.budget) {
      summary += `üí∞ **–ë—é–¥–∂–µ—Ç**: ${parsed.budget.toLocaleString('ru-RU')} ‚ÇΩ`;
      summary += parsed.budgetType === 'perPerson' ? ' –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞\n' : ' –Ω–∞ –≤—Å–µ—Ö\n';
    }

    if (parsed.roomPreferences) {
      const room = parsed.roomPreferences;
      summary += '\nüè® **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É**:\n';
      if (room.roomType) summary += `   ‚Ä¢ –¢–∏–ø: ${room.roomType}\n`;
      if (room.viewPreference) summary += `   ‚Ä¢ –í–∏–¥: ${room.viewPreference}\n`;
      if (room.roomsCount) summary += `   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤: ${room.roomsCount}\n`;
    }

    summary += `\nüéØ **–°—Ç–∏–ª—å –æ—Ç–¥—ã—Ö–∞**: ${travelStyle}`;

    await bot.sendMessage(chatId, summary, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data: `ai_search_start_${searchRequest.id}` },
            { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `ai_search_edit_${searchRequest.id}` }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã', callback_data: `ai_search_priorities_${searchRequest.id}` }
          ],
          [
            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_ai_search' }
          ]
        ]
      }
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setUserState(userId, {
      state: FSM_STATES.IDLE,
      searchData: null,
      aiSearchRequest: null
    });

  } catch (error) {
    logger.error('Error processing AI search text:', error);
    await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search');
  }
}