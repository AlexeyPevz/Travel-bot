import TelegramBot from 'node-telegram-bot-api';
import { getUserState, setUserState, FSM_STATES, TourSearchData } from '../fsm';
import { handleDepartureCity as proceedDepartureCity, handleAdultsCount as proceedAdultsCount, handleChildrenInfo as proceedChildrenInfo } from './searchFlow';
import { analyzeTourRequest } from '../../services/openrouter';
import { searchTours } from '../../providers';
import { db } from '../../../db';
import { profiles } from '@shared/schema';
import { eq } from 'drizzle-orm';
import logger from '../../utils/logger';

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞
const POPULAR_DEPARTURE_CITIES = [
  '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
  '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
];

/**
 * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function startTourSearchFlow(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  try {
    await bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç), –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å/–¥–µ—Ñ–æ–ª—Ç—ã
    let preferences: any = {};
    try {
      preferences = text ? await analyzeTourRequest(text) : {};
    } catch {
      preferences = {};
    }

    // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try {
      const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId)).limit(1);
      if (profile) {
        preferences.countries = preferences.countries || (profile.countries as any) || [];
        preferences.budget = preferences.budget || (profile as any).budget || undefined;
        // –î–∞—Ç—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (!preferences.tripDuration && (profile as any).tripDuration) {
          preferences.tripDuration = (profile as any).tripDuration as any;
        }
        if (!preferences.startDate && (profile as any).startDate) {
          preferences.startDate = new Date((profile as any).startDate as any);
        }
        if (!preferences.endDate && (profile as any).endDate) {
          preferences.endDate = new Date((profile as any).endDate as any);
        }
      }
    } catch {}
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const searchData: TourSearchData = {
      destination: (preferences.countries && preferences.countries[0]) || '–¢—É—Ä—Ü–∏—è',
      countries: preferences.countries && preferences.countries.length ? preferences.countries : ['–¢—É—Ä—Ü–∏—è'],
      budget: preferences.budget,
      dateType: preferences.dateType || 'flexible',
      startDate: preferences.startDate,
      endDate: preferences.endDate,
      flexibleMonth: preferences.flexibleMonth,
      tripDuration: preferences.tripDuration || 7,
      vacationType: preferences.vacationType,
      priorities: preferences.priorities
    };
    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    try {
      const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId)).limit(1);
      if (profile) {
        // –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
        if (!searchData.departureCity && profile.departureCity) {
          searchData.departureCity = profile.departureCity;
        }
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
        if (!searchData.adultsCount && profile.adults) {
          searchData.adultsCount = profile.adults;
        }
        if (!searchData.childrenCount && typeof profile.children === 'number') {
          searchData.childrenCount = profile.children;
        }
        if (!searchData.childrenAges && profile.childrenAges) {
          searchData.childrenAges = profile.childrenAges as number[];
        }
        // –°—Ç—Ä–∞–Ω—ã
        if ((!searchData.countries || searchData.countries.length === 0) && profile.countries) {
          searchData.countries = profile.countries as string[];
        }
        // –ë—é–¥–∂–µ—Ç
        if (!searchData.budget && profile.budget) {
          searchData.budget = profile.budget;
        }
        // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (!searchData.tripDuration && profile.tripDuration) {
          searchData.tripDuration = profile.tripDuration;
        }
        // –î–∞—Ç—ã - –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        if (!searchData.startDate && !searchData.endDate && profile.startDate && profile.endDate) {
          searchData.dateType = 'fixed';
          searchData.startDate = new Date(profile.startDate);
          searchData.endDate = new Date(profile.endDate);
        }
        // –¢–∏–ø –æ—Ç–ø—É—Å–∫–∞
        if (!searchData.vacationType && profile.vacationType) {
          searchData.vacationType = profile.vacationType;
        }
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        if (!searchData.priorities && profile.priorities) {
          searchData.priorities = profile.priorities as Record<string, number>;
        }
      }
    } catch (error) {
      logger.error('Error loading profile data:', error);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setUserState(userId, {
      state: FSM_STATES.SEARCH_WAITING_DEPARTURE_CITY,
      profile: { userId },
      searchData
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –ø–æ–Ω—è–ª–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    let understoodMessage = '‚úÖ –í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª –∏–∑ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n\n';
    
    if (searchData.countries && searchData.countries.length > 0) {
      understoodMessage += `üìç **–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: ${searchData.countries.join(', ')}\n`;
    }
    
    if (searchData.budget) {
      understoodMessage += `üí∞ **–ë—é–¥–∂–µ—Ç**: –¥–æ ${searchData.budget.toLocaleString('ru-RU')} ‚ÇΩ\n`;
    }
    
    if (searchData.dateType === 'fixed' && searchData.startDate && searchData.endDate) {
      understoodMessage += `üìÖ **–î–∞—Ç—ã**: ${formatDate(searchData.startDate)} - ${formatDate(searchData.endDate)}\n`;
    } else if (searchData.flexibleMonth) {
      understoodMessage += `üìÖ **–ú–µ—Å—è—Ü**: ${searchData.flexibleMonth}\n`;
    }
    
    if (searchData.tripDuration) {
      understoodMessage += `‚è± **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: ${searchData.tripDuration} –Ω–æ—á–µ–π\n`;
    }
    
    understoodMessage += '\n–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.';
    
    await bot.sendMessage(chatId, understoodMessage, { parse_mode: 'Markdown' });

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
    if (searchData.departureCity) {
      await handleDepartureCity(bot, chatId, userId, searchData.departureCity);
      
      if (searchData.adultsCount) {
        await handleAdultsCount(bot, chatId, userId, String(searchData.adultsCount));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–µ–π
        if (searchData.childrenCount === 0) {
          await handleChildrenInfo(bot, chatId, userId, false);
        } else if (searchData.childrenCount && searchData.childrenCount > 0 && searchData.childrenAges && searchData.childrenAges.length === searchData.childrenCount) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π, –∏ –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ –¥–µ—Ç—è—Ö
          const state = getUserState(userId);
          if (state) {
            state.state = FSM_STATES.SEARCH_CONFIRMING_PARAMS;
            setUserState(userId, state);
            await ensureBudgetAndDuration(bot, chatId, userId);
          }
        }
      }
      return;
    }
    // –ò–Ω–∞—á–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
    await askDepartureCity(bot, chatId);
    
  } catch (error) {
    logger.error('Error starting tour search flow:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /search –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.'
    );
  }
}

/**
 * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
 */
async function askDepartureCity(bot: TelegramBot, chatId: number): Promise<void> {
  const keyboard = {
    reply_markup: {
      keyboard: POPULAR_DEPARTURE_CITIES.map(city => [{text: city}]),
      one_time_keyboard: true,
      resize_keyboard: true
    }
  };
  
  await bot.sendMessage(
    chatId,
    'üèô –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ª–µ—Ç?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:',
    keyboard
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞
 */
export async function handleDepartureCity(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  city: string
): Promise<void> {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  state.searchData.departureCity = city;
  state.state = FSM_STATES.SEARCH_WAITING_ADULTS_COUNT;
  setUserState(userId, state);
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö
  await bot.sendMessage(
    chatId,
    'üë• –°–∫–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (–æ—Ç 18 –ª–µ—Ç)?',
    {
      reply_markup: {
        keyboard: [
          [{text: '1'}, {text: '2'}, {text: '3'}],
          [{text: '4'}, {text: '5'}, {text: '6+'}]
        ],
        one_time_keyboard: true,
        resize_keyboard: true
      }
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö
 */
export async function handleAdultsCount(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  count: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  let adultsCount = count === '6+' ? 6 : parseInt(count);
  if (isNaN(adultsCount) || adultsCount < 1) {
    await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤–∑—Ä–æ—Å–ª—ã—Ö (–æ—Ç 1)');
    return;
  }
  
  state.searchData.adultsCount = adultsCount;
  state.state = FSM_STATES.SEARCH_WAITING_CHILDREN_INFO;
  setUserState(userId, state);
  
  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–µ—Ç–µ–π
  await bot.sendMessage(
    chatId,
    'üë∂ –ë—É–¥—É—Ç –ª–∏ —Å –≤–∞–º–∏ –¥–µ—Ç–∏ (–¥–æ 18 –ª–µ—Ç)?',
    {
      reply_markup: {
        inline_keyboard: [
          [
            {text: '–ù–µ—Ç –¥–µ—Ç–µ–π', callback_data: 'search_no_children'},
            {text: '–ï—Å—Ç—å –¥–µ—Ç–∏', callback_data: 'search_has_children'}
          ]
        ]
      }
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö
 */
export async function handleChildrenInfo(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  hasChildren: boolean
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  if (!hasChildren) {
    state.searchData.childrenCount = 0;
    state.searchData.childrenAges = [];
    state.state = FSM_STATES.SEARCH_CONFIRMING_PARAMS;
    setUserState(userId, state);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await showSearchSummary(bot, chatId, userId);
  } else {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
    await bot.sendMessage(
      chatId,
      'üë∂ –°–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –±—É–¥–µ—Ç —Å –≤–∞–º–∏?',
      {
        reply_markup: {
          keyboard: [
            [{text: '1'}, {text: '2'}, {text: '3'}],
            [{text: '4'}, {text: '5'}]
          ],
          one_time_keyboard: true,
          resize_keyboard: true
        }
      }
    );
  }
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏–º –±—é–¥–∂–µ—Ç, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
async function ensureBudgetAndDuration(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  const state = getUserState(userId);
  if (!state?.searchData) return;
  const data = state.searchData;
  let asked = false;
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (!data.tripDuration) {
    asked = true;
    await bot.sendMessage(
      chatId,
      '‚è± –ù–∞ —Å–∫–æ–ª—å–∫–æ –Ω–æ—á–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7)'
    );
    state.state = FSM_STATES.SEARCH_WAITING_DURATION;
    setUserState(userId, state);
    return; // –¥–æ–∂–¥—ë–º—Å—è –æ—Ç–≤–µ—Ç–∞
  }
  if (!data.budget) {
    asked = true;
    await bot.sendMessage(
      chatId,
      'üí∞ –£–∫–∞–∂–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ ‚ÇΩ), –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000'
    );
    state.state = FSM_STATES.SEARCH_WAITING_BUDGET;
    setUserState(userId, state);
    return;
  }
  
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
  if (data.starRating === undefined) {
    asked = true;
    await bot.sendMessage(
      chatId,
      '‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è?\n\n_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5_',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '3‚≠ê', callback_data: 'search_stars_3' },
              { text: '4‚≠ê', callback_data: 'search_stars_4' },
              { text: '5‚≠ê', callback_data: 'search_stars_5' }
            ],
            [
              { text: '–ù–µ –≤–∞–∂–Ω–æ', callback_data: 'search_stars_any' }
            ]
          ]
        }
      }
    );
    state.state = FSM_STATES.SEARCH_WAITING_STAR_RATING;
    setUserState(userId, state);
    return;
  }
  
  if (!data.mealType) {
    asked = true;
    await bot.sendMessage(
      chatId,
      'üç¥ –ö–∞–∫–æ–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ', callback_data: 'search_meal_ai' },
              { text: '–ó–∞–≤—Ç—Ä–∞–∫', callback_data: 'search_meal_bb' }
            ],
            [
              { text: '–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω', callback_data: 'search_meal_hb' },
              { text: '–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω', callback_data: 'search_meal_fb' }
            ],
            [
              { text: '–ù–µ –≤–∞–∂–Ω–æ', callback_data: 'search_meal_any' }
            ]
          ]
        }
      }
    );
    state.state = FSM_STATES.SEARCH_WAITING_MEAL_TYPE;
    setUserState(userId, state);
    return;
  }
  
  if (!asked) {
    await showSearchSummary(bot, chatId, userId);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ (–Ω–æ—á–µ–π)
 */
export async function handleTripDuration(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  nightsText: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state?.searchData) return;
  const nights = parseInt(nightsText.replace(/\D+/g, ''));
  if (!Number.isFinite(nights) || nights < 1) {
    await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–æ—á–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7');
    return;
  }
  state.searchData.tripDuration = nights;
  setUserState(userId, state);
  // –ø–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∏–º –±—é–¥–∂–µ—Ç
  await ensureBudgetAndDuration(bot, chatId, userId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç (—Ä—É–±./—á–µ–ª.)
 */
export async function handleBudget(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  budgetText: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state?.searchData) return;
  const budget = parseInt(budgetText.replace(/\D+/g, ''));
  if (!Number.isFinite(budget) || budget < 10000) {
    await bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100000');
    return;
  }
  state.searchData.budget = budget;
  // –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  state.state = FSM_STATES.SEARCH_CONFIRMING_PARAMS;
  setUserState(userId, state);
  await showSearchSummary(bot, chatId, userId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
 */
export async function handleChildrenCount(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  count: string
): Promise<void> {
  try {
    const state = getUserState(userId);
    if (!state || !state.searchData) return;
    
    const childrenCount = parseInt(count);
    if (isNaN(childrenCount) || childrenCount < 1) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–µ—Ç–µ–π');
      return;
    }
    
    if (childrenCount > 10) {
      await bot.sendMessage(chatId, '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π - 10. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.');
      return;
    }
    
    state.searchData.childrenCount = childrenCount;
    state.searchData.childrenAges = [];
    state.state = FSM_STATES.SEARCH_WAITING_CHILDREN_AGES;
    setUserState(userId, state);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π
    await bot.sendMessage(
      chatId,
      `üë∂ –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 14\n\n_–í–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π –≤–∞–∂–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏_`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    logger.error('Error handling children count:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π
 */
export async function handleChildrenAges(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  agesText: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ childrenCount –∑–∞–¥–∞–Ω
    if (!state.searchData.childrenCount || state.searchData.childrenCount === 0) {
      logger.error('childrenCount is not set when handling ages');
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.');
      state.state = FSM_STATES.IDLE;
      setUserState(userId, state);
      return;
    }
    
    // –ü–∞—Ä—Å–∏–º –≤–æ–∑—Ä–∞—Å—Ç–∞
    const ages = agesText.split(/[,\s]+/)
      .map(age => parseInt(age.trim()))
      .filter(age => !isNaN(age) && age >= 0 && age < 18);
    
    if (ages.length !== state.searchData.childrenCount) {
      await bot.sendMessage(
        chatId,
        `‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –≤—Å–µ—Ö ${state.searchData.childrenCount} –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é`
      );
      return;
    }
    
    state.searchData.childrenAges = ages;
    state.state = FSM_STATES.SEARCH_CONFIRMING_PARAMS;
    setUserState(userId, state);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await ensureBudgetAndDuration(bot, chatId, userId);
  } catch (error) {
    logger.error('Error handling children ages:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏ –æ—Ç–µ–ª—è
 */
export async function handleStarRating(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  rating: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  if (rating === 'any') {
    state.searchData.starRating = 0; // 0 –æ–∑–Ω–∞—á–∞–µ—Ç "–Ω–µ –≤–∞–∂–Ω–æ"
  } else {
    const stars = parseInt(rating);
    if (isNaN(stars) || stars < 1 || stars > 5) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥ –∏–ª–∏ "–ù–µ –≤–∞–∂–Ω–æ"');
      return;
    }
    state.searchData.starRating = stars;
  }
  
  setUserState(userId, state);
  await ensureBudgetAndDuration(bot, chatId, userId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
 */
export async function handleMealType(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  mealType: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  const mealTypes: Record<string, string> = {
    'ai': 'all_inclusive',
    'bb': 'breakfast',
    'hb': 'half_board',
    'fb': 'full_board',
    'any': 'any'
  };
  
  state.searchData.mealType = mealTypes[mealType] || 'any';
  setUserState(userId, state);
  await ensureBudgetAndDuration(bot, chatId, userId);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
 */
async function showSearchSummary(
  bot: TelegramBot,
  chatId: number,
  userId: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  const data = state.searchData;
  
  let summary = 'üìã **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –ø–æ–∏—Å–∫–∞:**\n\n';
  
  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (data.countries && data.countries.length > 0) {
    summary += `üìç **–ö—É–¥–∞**: ${data.countries.join(', ')}\n`;
  }
  
  // –û—Ç–∫—É–¥–∞
  summary += `‚úàÔ∏è **–û—Ç–∫—É–¥–∞**: ${data.departureCity}\n`;
  
  // –î–∞—Ç—ã
  if (data.dateType === 'fixed' && data.startDate && data.endDate) {
    summary += `üìÖ **–ö–æ–≥–¥–∞**: ${formatDate(data.startDate)} - ${formatDate(data.endDate)}\n`;
  } else if (data.flexibleMonth) {
    summary += `üìÖ **–ú–µ—Å—è—Ü**: ${data.flexibleMonth} (–≥–∏–±–∫–∏–µ –¥–∞—Ç—ã)\n`;
  } else {
    summary += `üìÖ **–î–∞—Ç—ã**: –≥–∏–±–∫–∏–µ\n`;
  }
  
  // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (data.tripDuration) {
    summary += `‚è± **–ù–æ—á–µ–π**: ${data.tripDuration}\n`;
  }
  
  // –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏
  summary += `üë• **–í–∑—Ä–æ—Å–ª—ã—Ö**: ${data.adultsCount}\n`;
  if (data.childrenCount && data.childrenCount > 0) {
    summary += `üë∂ **–î–µ—Ç–µ–π**: ${data.childrenCount} (–≤–æ–∑—Ä–∞—Å—Ç: ${data.childrenAges?.join(', ')})\n`;
  }
  
  // –ë—é–¥–∂–µ—Ç
  if (data.budget) {
    summary += `üí∞ **–ë—é–¥–∂–µ—Ç**: –¥–æ ${data.budget.toLocaleString('ru-RU')} ‚ÇΩ\n`;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (data.starRating && data.starRating > 0) {
    summary += `‚≠ê **–ú–∏–Ω–∏–º—É–º –∑–≤–µ–∑–¥**: ${data.starRating}\n`;
  }
  
  if (data.mealType && data.mealType !== 'any') {
    const mealTypeNames: Record<string, string> = {
      'all_inclusive': '–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ',
      'breakfast': '–ó–∞–≤—Ç—Ä–∞–∫',
      'half_board': '–ü–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω',
      'full_board': '–ü–æ–ª–Ω—ã–π –ø–∞–Ω—Å–∏–æ–Ω'
    };
    summary += `üç¥ **–ü–∏—Ç–∞–Ω–∏–µ**: ${mealTypeNames[data.mealType] || data.mealType}\n`;
  }
  
  summary += '\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞!';
  
  await bot.sendMessage(chatId, summary, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          {text: 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data: 'search_confirm'},
          {text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'search_edit'}
        ],
        [
          {text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'search_cancel'}
        ]
      ]
    }
  });
}

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
 */
export async function performTourSearch(
  bot: TelegramBot,
  chatId: number,
  userId: string
): Promise<void> {
  const state = getUserState(userId);
  if (!state || !state.searchData) return;
  
  const data = state.searchData;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  // –ó–∞–ø–æ–ª–Ω–∏–º –¥–µ—Ñ–æ–ª—Ç—ã, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç (—Å—Ç—Ä–∞–Ω–∞/–≤—ã–ª–µ—Ç/–≤–∑—Ä–æ—Å–ª—ã–µ)
  if (!data.countries || data.countries.length === 0) {
    data.countries = ['–¢—É—Ä—Ü–∏—è'];
  }
  if (!data.departureCity) {
    data.departureCity = '–ú–æ—Å–∫–≤–∞';
  }
  if (!data.adultsCount || data.adultsCount < 1) {
    data.adultsCount = 2;
  }
  
  try {
    await bot.sendMessage(chatId, 'üîé –ò—â—É —Ç—É—Ä—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...\n\n_–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥_', {
      parse_mode: 'Markdown'
    });
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
    const searchParams = {
      destination: data.countries[0], // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
      dateType: data.dateType || 'flexible',
      startDate: data.startDate,
      endDate: data.endDate,
      flexibleMonth: data.flexibleMonth,
      tripDuration: data.tripDuration || 7,
      budget: data.budget,
      priorities: data.priorities,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      departureCity: data.departureCity,
      adults: data.adultsCount,
      children: data.childrenCount || 0,
      childrenAges: data.childrenAges || [],
      // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      minStarRating: data.starRating && data.starRating > 0 ? data.starRating : undefined,
      mealType: data.mealType !== 'any' ? data.mealType : undefined,
      resort: data.resort
    };
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    const tours = await searchTours(searchParams);
    
    if (tours.length === 0) {
      await bot.sendMessage(
        chatId,
        'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ç—É—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        {
          reply_markup: {
            inline_keyboard: [
              [{text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: 'search_edit'}],
              [{text: 'üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'new_search'}]
            ]
          }
        }
      );
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await bot.sendMessage(
      chatId,
      `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tours.length} —Ç—É—Ä–æ–≤!\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:`
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç—É—Ä–æ–≤
    for (let i = 0; i < Math.min(5, tours.length); i++) {
      const tour = tours[i];
      await sendTourCard(bot, chatId, tour);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.state = FSM_STATES.IDLE;
    setUserState(userId, state);
    
  } catch (error) {
    logger.error('Error performing tour search:', error);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç—É—Ä–∞
 */
async function sendTourCard(bot: TelegramBot, chatId: number, tour: any): Promise<void> {
  const message = `
üè® **${tour.hotel}** ${tour.hotelStars}‚≠ê
üìç ${tour.destination}
üå¥ ${tour.beachLine || '–õ–∏–Ω–∏—è –ø–ª—è–∂–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üçΩ ${tour.mealType || '–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ ${tour.nights} –Ω–æ—á–µ–π
üí∞ **${tour.price.toLocaleString('ru-RU')} ‚ÇΩ**
${tour.priceOld ? `~~${tour.priceOld.toLocaleString('ru-RU')} ‚ÇΩ~~` : ''}

[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${tour.link})
`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{text: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä—É', url: tour.link}]
      ]
    }
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 */
function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long'
  });
}