import { BaseCommand, CommandContext } from './base';
import { storage } from '../../storage';

/**
 * –ö–æ–º–∞–Ω–¥–∞ /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É
 */
export class JoinCommand extends BaseCommand {
  name = 'join';
  description = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É —Ç—É—Ä–∞';
  usage = '/join';

  async execute(ctx: CommandContext): Promise<void> {
    const { bot, chatId, userId } = ctx;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
      if (!this.isGroupChat(chatId)) {
        await this.sendMessage(
          bot,
          chatId,
          '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /groupsetup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const profile = await storage.getProfile(userId);
      
      if (!profile) {
        await this.sendMessage(
          bot,
          chatId,
          '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –ø–æ–∏—Å–∫–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.',
          {
            reply_markup: {
              inline_keyboard: [[
                { text: '–ù–∞—á–∞—Ç—å –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ', url: `https://t.me/${(await bot.getMe()).username}?start=from_group` }
              ]]
            }
          }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
      const groupProfile = await storage.getGroupProfile(chatId.toString());
      
      if (!groupProfile) {
        await this.sendMessage(
          bot,
          chatId,
          '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∏—Å–∫. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /groupsetup.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      if (groupProfile.memberIds?.includes(userId)) {
        await this.sendMessage(
          bot,
          chatId,
          `${profile.name}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –ø–æ–∏—Å–∫–µ! ‚úÖ`
        );
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
      const updatedMemberIds = [...(groupProfile.memberIds || []), userId];
      await storage.updateGroupProfile(chatId.toString(), {
        ...groupProfile,
        memberIds: updatedMemberIds
      });
      
      await this.sendMessage(
        bot,
        chatId,
        `üéâ ${profile.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É!\n\n` +
        `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${updatedMemberIds.length}\n` +
        `–ö–æ–≥–¥–∞ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.`,
        {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üîç –ò—Å–∫–∞—Ç—å —Ç—É—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø—ã', callback_data: 'group_search_tours' }
            ]]
          }
        }
      );
    } catch (error) {
      await this.sendError(bot, chatId, error as Error);
    }
  }
}