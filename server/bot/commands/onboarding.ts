import TelegramBot from 'node-telegram-bot-api';
import { getUserState, setUserState, FSM_STATES, updateUserStateProfile } from '../fsm';
import { storage } from '../../storage';
import { MESSAGES } from '../messages/templates';
import { parseDate, parseDuration, parseBudget } from '../utils/parsers';
import logger from '../../utils/logger';
import { VACATION_TYPE_DESCRIPTIONS, VacationType } from '../../types/vacationTypes';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export async function handleOnboardingStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string,
  currentState: FSM_STATES
): Promise<void> {
  try {
    switch (currentState) {
      case FSM_STATES.WAITING_NAME:
        await handleNameStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_VACATION_TYPE:
        await handleVacationTypeStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_COUNTRIES:
        await handleCountriesStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_BUDGET:
        await handleBudgetStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_DATES:
        await handleDatesStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_DURATION:
        await handleDurationStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_TRAVELERS:
        await handleTravelersStep(bot, chatId, userId, text);
        break;
        
      case FSM_STATES.WAITING_PREFERENCES:
        await handlePreferencesStep(bot, chatId, userId, text);
        break;
    }
  } catch (error) {
    logger.error('Error in onboarding step:', error);
    await bot.sendMessage(chatId, MESSAGES.errors.general);
  }
}

/**
 * –®–∞–≥ 1: –ò–º—è
 */
async function handleNameStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  name: string
): Promise<void> {
  if (!name || name.length < 2) {
    await bot.sendMessage(
      chatId,
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)'
    );
    return;
  }

  updateUserStateProfile(userId, { name });
  setUserState(userId, {
    state: FSM_STATES.WAITING_VACATION_TYPE,
    profile: getUserState(userId)?.profile
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–¥—ã—Ö–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  const vacationButtons = [
    [
      { text: 'üèñÔ∏è –ü–ª—è–∂–Ω—ã–π', callback_data: 'vacation_beach' },
      { text: 'üéø –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π', callback_data: 'vacation_ski' }
    ],
    [
      { text: 'üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π', callback_data: 'vacation_excursion' },
      { text: 'üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π', callback_data: 'vacation_active' }
    ],
    [
      { text: 'üßò –í–µ–ª–Ω–µ—Å/–°–ü–ê', callback_data: 'vacation_wellness' },
      { text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π', callback_data: 'vacation_family' }
    ],
    [
      { text: 'üö¢ –ö—Ä—É–∏–∑—ã', callback_data: 'vacation_cruise' },
      { text: 'üåø –≠–∫–æ—Ç—É—Ä–∏–∑–º', callback_data: 'vacation_eco' }
    ],
    [
      { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'vacation_done' }
    ]
  ];

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.vacationType,
    { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: vacationButtons
      }
    }
  );
}

/**
 * –®–∞–≥ 2: –¢–∏–ø –æ—Ç–¥—ã—Ö–∞
 */
async function handleVacationTypeStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
  const userState = getUserState(userId);
  const selectedTypes = userState?.profile?.vacationType || [];
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
  if (text && !text.startsWith('/')) {
    updateUserStateProfile(userId, { vacationType: text });
    
    setUserState(userId, {
      state: FSM_STATES.WAITING_COUNTRIES,
      profile: getUserState(userId)?.profile
    });

    await bot.sendMessage(
      chatId,
      MESSAGES.onboarding.steps.countries,
      { parse_mode: 'Markdown' }
    );
  }
}

/**
 * –®–∞–≥ 2: –°—Ç—Ä–∞–Ω—ã
 */
async function handleCountriesStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  const countries = text.toLowerCase() === '–ª—é–±—ã–µ' 
    ? [] 
    : text.split(/[,Ôºå„ÄÅ]/).map(c => c.trim()).filter(c => c.length > 0);

  updateUserStateProfile(userId, { countries });
  setUserState(userId, {
    state: FSM_STATES.WAITING_BUDGET,
    profile: getUserState(userId)?.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.budget,
    { parse_mode: 'Markdown' }
  );
}

/**
 * –®–∞–≥ 3: –ë—é–¥–∂–µ—Ç
 */
async function handleBudgetStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  const budget = parseBudget(text);
  
  if (!budget || budget < 10000) {
    await bot.sendMessage(
      chatId,
      '–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º (–º–∏–Ω–∏–º—É–º 10 000 —Ä—É–±–ª–µ–π). –ù–∞–ø—Ä–∏–º–µ—Ä: 100000 –∏–ª–∏ 100 —Ç—ã—Å—è—á'
    );
    return;
  }

  updateUserStateProfile(userId, { budget });
  setUserState(userId, {
    state: FSM_STATES.WAITING_DATES,
    profile: getUserState(userId)?.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.dates,
    { parse_mode: 'Markdown' }
  );
}

/**
 * –®–∞–≥ 4: –î–∞—Ç—ã
 */
async function handleDatesStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  const { startDate, endDate } = parseDate(text);
  
  if (!startDate) {
    await bot.sendMessage(
      chatId,
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—è—Ü –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã.'
    );
    return;
  }

  updateUserStateProfile(userId, { startDate, endDate });
  setUserState(userId, {
    state: FSM_STATES.WAITING_DURATION,
    profile: getUserState(userId)?.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.duration,
    { parse_mode: 'Markdown' }
  );
}

/**
 * –®–∞–≥ 5: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
async function handleDurationStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  const duration = parseDuration(text);
  
  if (!duration || duration < 1 || duration > 30) {
    await bot.sendMessage(
      chatId,
      '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π –æ—Ç 1 –¥–æ 30. –ù–∞–ø—Ä–∏–º–µ—Ä: 7 –∏–ª–∏ 10-14'
    );
    return;
  }

  updateUserStateProfile(userId, { tripDuration: duration });
  setUserState(userId, {
    state: FSM_STATES.WAITING_TRAVELERS,
    profile: getUserState(userId)?.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.travelers,
    { parse_mode: 'Markdown' }
  );
}

/**
 * –®–∞–≥ 6: –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏
 */
async function handleTravelersStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ –¥–µ—Ç–µ–π
  const adultsMatch = text.match(/(\d+)\s*–≤–∑—Ä–æ—Å–ª/i);
  const childrenMatch = text.match(/(\d+)\s*(?:—Ä–µ–±|–¥–µ—Ç)/i);
  const childAgesMatch = text.matchAll(/(?:—Ä–µ–±|–¥–µ—Ç)\w*\s+(\d+)\s*–ª–µ—Ç/gi);
  
  const adults = adultsMatch ? parseInt(adultsMatch[1]) : 2;
  const children = childrenMatch ? parseInt(childrenMatch[1]) : 0;
  const childrenAges = Array.from(childAgesMatch).map(m => parseInt(m[1]));

  updateUserStateProfile(userId, { 
    adults,
    children,
    childrenAges: childrenAges.length > 0 ? childrenAges : undefined
  });
  
  setUserState(userId, {
    state: FSM_STATES.WAITING_PREFERENCES,
    profile: getUserState(userId)?.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.steps.preferences,
    { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©', callback_data: 'skip_preferences' }
        ]]
      }
    }
  );
}

/**
 * –®–∞–≥ 7: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
 */
async function handlePreferencesStep(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  if (text !== 'skip') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
    updateUserStateProfile(userId, { preferences: text });
  }

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  await completeOnboarding(bot, chatId, userId);
}

/**
 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
async function completeOnboarding(
  bot: TelegramBot,
  chatId: number,
  userId: string
): Promise<void> {
  const userState = getUserState(userId);
  if (!userState || !userState.profile) return;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É
  await storage.saveProfile({
    ...userState.profile,
    userId,
    createdAt: new Date(),
    updatedAt: new Date(),
    isActive: true
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  setUserState(userId, {
    state: FSM_STATES.IDLE,
    profile: userState.profile
  });

  await bot.sendMessage(
    chatId,
    MESSAGES.onboarding.complete,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîç –ù–∞–π—Ç–∏ —Ç—É—Ä—ã', callback_data: 'search_tours' }],
          [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'show_profile' }]
        ]
      }
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
 */
export async function handleSkipPreferences(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const userId = callbackQuery.from.id.toString();
  
  if (!chatId) return;

  await bot.answerCallbackQuery(callbackQuery.id, { 
    text: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã' 
  });
  
  await completeOnboarding(bot, chatId, userId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–¥—ã—Ö–∞ —á–µ—Ä–µ–∑ callback
 */
export async function handleVacationTypeCallback(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const userId = callbackQuery.from.id.toString();
  const data = callbackQuery.data;
  
  if (!chatId || !data) return;

  const userState = getUserState(userId);
  let selectedTypes = userState?.profile?.selectedVacationTypes || [];

  if (data === 'vacation_done') {
    if (selectedTypes.length === 0) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞',
        show_alert: true
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    updateUserStateProfile(userId, { 
      vacationType: selectedTypes.join(', '),
      selectedVacationTypes: selectedTypes 
    });
    
    setUserState(userId, {
      state: FSM_STATES.WAITING_COUNTRIES,
      profile: getUserState(userId)?.profile
    });

    await bot.answerCallbackQuery(callbackQuery.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await bot.sendMessage(
      chatId,
      MESSAGES.onboarding.steps.countries,
      { parse_mode: 'Markdown' }
    );
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.editMessageReplyMarkup(
      { inline_keyboard: [] },
      {
        chat_id: chatId,
        message_id: callbackQuery.message?.message_id
      }
    );
    
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
  const vacationType = data.replace('vacation_', '');
  
  if (selectedTypes.includes(vacationType)) {
    // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    selectedTypes = selectedTypes.filter(t => t !== vacationType);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    selectedTypes.push(vacationType);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  updateUserStateProfile(userId, { selectedVacationTypes: selectedTypes });

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
  const vacationButtons = [
    [
      { 
        text: `${selectedTypes.includes('beach') ? '‚úÖ ' : ''}üèñÔ∏è –ü–ª—è–∂–Ω—ã–π`, 
        callback_data: 'vacation_beach' 
      },
      { 
        text: `${selectedTypes.includes('ski') ? '‚úÖ ' : ''}üéø –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π`, 
        callback_data: 'vacation_ski' 
      }
    ],
    [
      { 
        text: `${selectedTypes.includes('excursion') ? '‚úÖ ' : ''}üèõÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π`, 
        callback_data: 'vacation_excursion' 
      },
      { 
        text: `${selectedTypes.includes('active') ? '‚úÖ ' : ''}üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π`, 
        callback_data: 'vacation_active' 
      }
    ],
    [
      { 
        text: `${selectedTypes.includes('wellness') ? '‚úÖ ' : ''}üßò –í–µ–ª–Ω–µ—Å/–°–ü–ê`, 
        callback_data: 'vacation_wellness' 
      },
      { 
        text: `${selectedTypes.includes('family') ? '‚úÖ ' : ''}üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π`, 
        callback_data: 'vacation_family' 
      }
    ],
    [
      { 
        text: `${selectedTypes.includes('cruise') ? '‚úÖ ' : ''}üö¢ –ö—Ä—É–∏–∑—ã`, 
        callback_data: 'vacation_cruise' 
      },
      { 
        text: `${selectedTypes.includes('eco') ? '‚úÖ ' : ''}üåø –≠–∫–æ—Ç—É—Ä–∏–∑–º`, 
        callback_data: 'vacation_eco' 
      }
    ],
    [
      { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'vacation_done' }
    ]
  ];

  await bot.editMessageReplyMarkup(
    { inline_keyboard: vacationButtons },
    {
      chat_id: chatId,
      message_id: callbackQuery.message?.message_id
    }
  );

  await bot.answerCallbackQuery(callbackQuery.id, {
    text: selectedTypes.length > 0 
      ? `–í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤: ${selectedTypes.length}` 
      : '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'
  });
}