import TelegramBot from 'node-telegram-bot-api';
import { analyzeTourRequest } from '../../services/openrouter';
import { db } from '../../../db';
import { profiles } from '@shared/schema';
import { eq } from 'drizzle-orm';
import logger from '../../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
 */
export async function handleFreeTextTourRequest(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  try {
    await bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI
    const preferences = await analyzeTourRequest(text);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const [existingProfile] = await db.select()
      .from(profiles)
      .where(eq(profiles.userId, userId))
      .limit(1);
    
    if (existingProfile) {
      await db.update(profiles)
        .set({
          vacationType: preferences.vacationType || existingProfile.vacationType,
          countries: preferences.countries || existingProfile.countries,
          budget: preferences.budget || existingProfile.budget,
          peopleCount: preferences.peopleCount || existingProfile.peopleCount,
          priorities: preferences.priorities || existingProfile.priorities,
          updatedAt: new Date()
        })
        .where(eq(profiles.userId, userId));
    } else {
      await db.insert(profiles)
        .values({
          userId,
          vacationType: preferences.vacationType,
          countries: preferences.countries,
          budget: preferences.budget,
          peopleCount: preferences.peopleCount || 2,
          priorities: preferences.priorities
        });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let message = '‚úÖ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n';
    
    if (preferences.countries && preferences.countries.length > 0) {
      message += `üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${preferences.countries.join(', ')}\n`;
    }
    if (preferences.budget) {
      message += `üí∞ –ë—é–¥–∂–µ—Ç: ${preferences.budget.toLocaleString('ru-RU')} ‚ÇΩ\n`;
    }
    if (preferences.peopleCount) {
      message += `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${preferences.peopleCount}\n`;
    }
    if (preferences.vacationType) {
      const typeMap: Record<string, string> = {
        'beach': 'üèñ –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö',
        'active': 'üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö',
        'cultural': 'üèõ –ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º',
        'relaxing': 'üßò‚Äç‚ôÄÔ∏è –°–ø–æ–∫–æ–π–Ω—ã–π –æ—Ç–¥—ã—Ö',
        'family': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö',
        'romantic': 'üíë –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        'adventure': 'üéí –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'
      };
      message += `üéØ –¢–∏–ø –æ—Ç–¥—ã—Ö–∞: ${typeMap[preferences.vacationType] || preferences.vacationType}\n`;
    }
    
    message += '\n–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—É—Ä–æ–≤...';
    
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîç –ò—Å–∫–∞—Ç—å —Ç—É—Ä—ã', callback_data: 'search_tours' }],
          [{ text: '‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: 'edit_profile' }]
        ]
      }
    });
    
    logger.info(`Processed free text tour request for user ${userId}`);
  } catch (error) {
    logger.error('Error handling free text tour request:', error);
    
    await bot.sendMessage(
      chatId,
      '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–Ω–∞—á–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–Ω–∫–µ—Ç–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: 'start_questionnaire' }]
          ]
        }
      }
    );
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–∞
 */
export function isTourSearchRequest(text: string): boolean {
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–∞
  const keywords = [
    '—Ç—É—Ä', '–æ—Ç–ø—É—Å–∫', '–æ—Ç–¥—ã—Ö', '–ø–æ–µ–∑–¥–∫–∞', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
    '—Ö–æ—á—É', '–∏—â—É', '–Ω—É–∂–µ–Ω', '–ø–æ–¥–±–µ—Ä–∏', '–Ω–∞–π–¥–∏',
    '—Å–ª–µ—Ç–∞—Ç—å', '–ø–æ–µ—Ö–∞—Ç—å', '—Å—ä–µ–∑–¥–∏—Ç—å', '–æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
    '–º–æ—Ä–µ', '–ø–ª—è–∂', '–≥–æ—Ä—ã', '—ç–∫—Å–∫—É—Ä—Å–∏–∏'
  ];
  
  const lowerText = text.toLowerCase();
  return keywords.some(keyword => lowerText.includes(keyword));
}