import TelegramBot from 'node-telegram-bot-api';
import { storage } from '../storage';
import { getUserState, setUserState, resetUserState, FSM_STATES } from './fsm';
import { getAllTours } from '../services/toursService';
import { createReferralCode, addReferral } from '../services/referral';
import { scheduleTourNotification } from '../services/scheduler';
import { sendIntroCards } from './utils/onboarding';
import { analyzeTourRequest } from '../services/openrouter';
import { db } from '../../db';
import { profiles, monitoringTasks, groupProfiles } from '@shared/schema';
import { eq } from 'drizzle-orm';

export async function handleCommand(
  bot: TelegramBot, 
  chatId: number, 
  userId: string, 
  command: string
): Promise<void> {
  try {
    switch (command) {
      case '/start':
        await handleStartCommand(bot, chatId, userId);
        break;
      case '/help':
        await handleHelpCommand(bot, chatId, userId);
        break;
      case '/myrequests':
        await handleMyRequestsCommand(bot, chatId, userId);
        break;
      case '/referral':
        await handleReferralCommand(bot, chatId, userId);
        break;
      case '/join':
        await handleJoinCommand(bot, chatId, userId);
        break;
      case '/groupsetup':
        await handleGroupSetupCommand(bot, chatId, userId);
        break;
      default:
        await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
    }
  } catch (error) {
    console.error(`Error handling command ${command}:`, error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
 */
async function handleFreeTextTourRequest(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string
): Promise<void> {
  try {
    await bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é AI
    const preferences = await analyzeTourRequest(text);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const [existingProfile] = await db.select()
      .from(profiles)
      .where(eq(profiles.userId, userId))
      .limit(1);
    
    if (existingProfile) {
      await db.update(profiles)
        .set({
          vacationType: preferences.vacationType || existingProfile.vacationType,
          countries: preferences.countries || existingProfile.countries,
          budget: preferences.budget || existingProfile.budget,
          peopleCount: preferences.peopleCount || existingProfile.peopleCount,
          priorities: preferences.priorities || existingProfile.priorities,
          updatedAt: new Date()
        })
        .where(eq(profiles.userId, userId));
    } else {
      await db.insert(profiles)
        .values({
          userId,
          vacationType: preferences.vacationType,
          countries: preferences.countries,
          budget: preferences.budget,
          peopleCount: preferences.peopleCount || 2,
          priorities: preferences.priorities
        });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let message = '‚úÖ –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n';
    
    if (preferences.countries && preferences.countries.length > 0) {
      message += `üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${preferences.countries.join(', ')}\n`;
    }
    if (preferences.budget) {
      message += `üí∞ –ë—é–¥–∂–µ—Ç: ${preferences.budget.toLocaleString('ru-RU')} ‚ÇΩ\n`;
    }
    if (preferences.peopleCount) {
      message += `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${preferences.peopleCount}\n`;
    }
    if (preferences.vacationType) {
      const types: Record<string, string> = {
        beach: '–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö',
        active: '–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö',
        cultural: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ç—É—Ä–∏–∑–º',
        family: '–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö'
      };
      message += `üèñ –¢–∏–ø –æ—Ç–¥—ã—Ö–∞: ${types[preferences.vacationType] || preferences.vacationType}\n`;
    }
    
    message += '\n–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞?';
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ—Å–∞', callback_data: 'setup_weights' },
          { text: 'üîç –ò—Å–∫–∞—Ç—å —Ç—É—Ä—ã', callback_data: 'search_tours_now' }
        ],
        [
          { text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É', callback_data: 'start_profile' }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, message, { reply_markup: keyboard });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await db.insert(monitoringTasks)
      .values({
        userId,
        profileId: existingProfile?.id,
        taskType: 'profile_monitor',
        nextRunAt: new Date(Date.now() + 30 * 60 * 1000), // –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        status: 'active'
      })
      .onConflictDoNothing();
    
  } catch (error) {
    console.error('Error handling free text request:', error);
    await bot.sendMessage(
      chatId, 
      '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.'
    );
  }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
async function showWeightsSetup(
  bot: TelegramBot,
  chatId: number,
  userId: string
): Promise<void> {
  const message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤*

–û—Ü–µ–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—Ç 0 –¥–æ 10:
‚Ä¢ 0 - —Å–æ–≤—Å–µ–º –Ω–µ –≤–∞–∂–Ω–æ
‚Ä¢ 5 - —É–º–µ—Ä–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ  
‚Ä¢ 10 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;

  const [profile] = await db.select()
    .from(profiles)
    .where(eq(profiles.userId, userId))
    .limit(1);

  const defaultWeights = {
    starRating: 5,
    beachLine: 5,
    mealType: 5,
    price: 7,
    hotelRating: 5,
    location: 5,
    familyFriendly: 5
  };

  const weights = profile?.priorities || defaultWeights;
  
  const weightLabels: Record<string, string> = {
    starRating: '‚≠ê –ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è',
    beachLine: 'üèñ –õ–∏–Ω–∏—è –ø–ª—è–∂–∞',
    mealType: 'üçΩ –¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è',
    price: 'üí∞ –¶–µ–Ω–∞',
    hotelRating: 'üìä –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è',
    location: 'üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
    familyFriendly: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏'
  };

  const keyboard = {
    inline_keyboard: Object.entries(weights).map(([key, value]) => [
      { text: weightLabels[key] || key, callback_data: `weight_label_${key}` },
      { text: '‚ûñ', callback_data: `weight_dec_${key}` },
      { text: String(value), callback_data: `weight_val_${key}` },
      { text: '‚ûï', callback_data: `weight_inc_${key}` }
    ]).concat([
      [{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'save_weights' }]
    ])
  };

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

export async function handleDeepLink(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  referrerId: string
): Promise<void> {
  try {
    // Check if referrer exists
    const referrer = await storage.getProfile(referrerId);
    
    if (referrer) {
      // Check if this is a new user
      const userProfile = await storage.getProfile(userId);
      
      if (!userProfile) {
        // New user, register referral
        await addReferral(referrerId, userId);
        
        await bot.sendMessage(
          chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç ${referrer.name}. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.`
        );
      } else {
        await bot.sendMessage(
          chatId,
          `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`
        );
      }
    }
    
    // Continue with regular start flow
    await handleStartCommand(bot, chatId, userId);
  } catch (error) {
    console.error('Error handling deep link:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.'
    );
  }
}

async function handleStartCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // Reset user state
    resetUserState(userId);
    
    // Check if user already has a profile
    const existingProfile = await storage.getProfile(userId);
    
    if (existingProfile) {
      // Returning user
      const keyboard = {
        inline_keyboard: [
          [{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/profile` } }],
          [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: 'edit_profile' }],
          [{ text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—É—Ä—ã', callback_data: 'show_tours' }]
        ]
      };
      
      await bot.sendMessage(
        chatId,
        `–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, ${existingProfile.name}! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?`,
        { reply_markup: keyboard }
      );
      
      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –û–Ω–∏ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /help –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      await sendIntroCards(bot, chatId, userId);
    }
  } catch (error) {
    console.error('Error handling start command:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
    );
  }
}

async function handleMyRequestsCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // Get user profile
    const profile = await storage.getProfile(userId);
    
    if (!profile) {
      await bot.sendMessage(
        chatId,
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.'
      );
      return;
    }
    
    // Get active watchlists
    const watchlists = await storage.getWatchlists(userId);
    
    if (watchlists.length === 0) {
      await bot.sendMessage(
        chatId,
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/watchlist` } }]
            ]
          }
        }
      );
      return;
    }
    
    // Format watchlists
    let message = '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n';
    
    watchlists.forEach((watchlist, index) => {
      message += `${index + 1}. ${watchlist.destination}\n`;
      message += `   –ë—é–¥–∂–µ—Ç: ${watchlist.budget ? `${watchlist.budget} ‚ÇΩ` : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${watchlist.tripDuration || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –¥–Ω–µ–π\n`;
      message += `   –°—Ç–∞—Ç—É—Å: ${watchlist.active ? '–∞–∫—Ç–∏–≤–Ω—ã–π' : '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
      
      if (watchlist.deadline) {
        const daysLeft = Math.floor((new Date(watchlist.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
        message += `   –°—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è: ${daysLeft > 0 ? `–æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω–µ–π` : '–∏—Å—Ç–µ–∫'}\n`;
      }
      
      message += '\n';
    });
    
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/watchlist` } }]
        ]
      }
    });
  } catch (error) {
    console.error('Error handling myrequests command:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

async function handleReferralCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // Get user profile
    const profile = await storage.getProfile(userId);
    
    if (!profile) {
      await bot.sendMessage(
        chatId,
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.'
      );
      return;
    }
    
    // Get referrals
    const referrals = await storage.getReferralsByUser(userId);
    
    // Create referral link if not exists
    if (!profile.referralCode) {
      const referralCode = await createReferralCode(userId);
      await storage.createOrUpdateProfile({
        ...profile,
        referralCode
      });
    }
    
    const botUsername = (await bot.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;
    
    let message = `üéÅ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}\n\n`;
    message += `–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 500 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n`;
    
    if (referrals.length > 0) {
      message += `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n`;
      message += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: ${referrals.length}\n`;
      
      // Calculate total bonus
      const totalBonus = referrals.reduce((sum, ref) => sum + (ref.bonus || 0), 0);
      message += `- –û–±—â–∏–π –±–æ–Ω—É—Å: ${totalBonus} ‚ÇΩ\n\n`;
      
      message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n`;
      
      // Show last 5 referrals
      const lastReferrals = referrals.slice(0, 5);
      lastReferrals.forEach((ref, index) => {
        const name = ref.referred?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        message += `${index + 1}. ${name} (+${ref.bonus} ‚ÇΩ)\n`;
      });
    } else {
      message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`;
    }
    
    await bot.sendMessage(chatId, message);
  } catch (error) {
    console.error('Error handling referral command:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤–∏–¥–µ–ª –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç
 */
async function handleHelpCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    try {
      await bot.getChat(chatId);
    } catch (chatError) {
      console.warn(`–ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.`);
      return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await bot.sendMessage(
      chatId,
      '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π\n' +
      '/myrequests - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n' +
      '/referral - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É'
    );
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Ñ–ª–∞–≥–æ–º force=true
    await sendIntroCards(bot, chatId, userId, true);
    console.log(`–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–º–æ—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç ${chatId}`);
  } catch (error) {
    console.error('Error handling help command:', error);
    try {
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
      );
    } catch (msgError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', msgError);
    }
  }
}

async function handleJoinCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // Only works in group chats
    const chat = await bot.getChat(chatId);
    
    if (chat.type === 'private') {
      await bot.sendMessage(
        chatId,
        '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.'
      );
      return;
    }
    
    // Get user profile
    const profile = await storage.getProfile(userId);
    
    if (!profile) {
      await bot.sendMessage(
        chatId,
        '–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—á–Ω—É—é –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.'
      );
      return;
    }
    
    // Add user to group
    const chatIdStr = chatId.toString();
    const groupId = await storage.addUserToGroup(chatIdStr, userId);
    
    if (groupId) {
      await bot.sendMessage(
        chatId,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profile.name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ!`
      );
    } else {
      // Create new group profile
      const groupName = chat.title || '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞';
      
      await storage.createOrUpdateGroupProfile({
        chatId: chatIdStr,
        name: groupName,
        members: [userId]
      });
      
      await bot.sendMessage(
        chatId,
        `–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ "${groupName}"!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profile.name} —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /join.`
      );
    }
  } catch (error) {
    console.error('Error handling join command:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

async function handleGroupSetupCommand(bot: TelegramBot, chatId: number, userId: string): Promise<void> {
  try {
    // Only works in group chats
    const chat = await bot.getChat(chatId);
    
    if (chat.type === 'private') {
      await bot.sendMessage(
        chatId,
        '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.'
      );
      return;
    }
    
    // Check if group already exists
    const chatIdStr = chatId.toString();
    const groupProfile = await storage.getGroupProfile(chatIdStr);
    
    if (!groupProfile || !groupProfile.members || groupProfile.members.length === 0) {
      await bot.sendMessage(
        chatId,
        '–°–Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /join.'
      );
      return;
    }
    
    // Send group setup message
    await bot.sendMessage(
      chatId,
      `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è "${chat.title || '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞'}"!\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã (${groupProfile.members.length}):\n${groupProfile.members.map((m, i) => `${i + 1}. –£—á–∞—Å—Ç–Ω–∏–∫ #${m}`).join('\n')}\n\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≥—Ä—É–ø–ø—ã –∏ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä—É–ø–ø—É', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/groups?chatId=${chatIdStr}` } }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('Error handling groupsetup command:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

export async function handleMessage(
  bot: TelegramBot, 
  chatId: number, 
  userId: string, 
  msg: TelegramBot.Message
): Promise<void> {
  try {
    const state = getUserState(userId);
    const messageText = msg.text || '';
    
    if (!state || state.state === FSM_STATES.IDLE) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—É—Ä—ã
      if (messageText.length > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await handleFreeTextTourRequest(bot, chatId, userId, messageText);
      }
      return;
    }
    
    switch (state.state) {
      case FSM_STATES.WAITING_NAME:
        state.profile.name = messageText;
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_VACATION_TYPE
        });
        
        // Present vacation type options from our configuration
        const { vacationTypes } = await import('../config/vacationTypes');
        
        const vacationTypeKeyboard = {
          inline_keyboard: vacationTypes.map(type => [
            { text: type.name, callback_data: `vacation_type_${type.key}` }
          ])
        };
        
        await bot.sendMessage(
          chatId,
          '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞:',
          { reply_markup: vacationTypeKeyboard }
        );
        break;
        
      case FSM_STATES.WAITING_COUNTRIES:
        // Process countries
        let countries: string[] = [];
        if (messageText.toLowerCase() === '–æ—Ç–∫—Ä—ã—Ç –∫–æ –≤—Å–µ–º—É') {
          countries = ['–õ—é–±–∞—è —Å—Ç—Ä–∞–Ω–∞'];
        } else {
          countries = messageText.split(',').map(c => c.trim()).filter(c => c.length > 0);
        }
        
        state.profile.countries = countries;
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_DESTINATION
        });
        
        await bot.sendMessage(
          chatId,
          '–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω):'
        );
        break;
        
      case FSM_STATES.WAITING_DESTINATION:
        state.profile.destination = messageText;
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_DATE_TYPE
        });
        
        await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞—Ç –ø–æ–µ–∑–¥–∫–∏:',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '–¢–æ—á–Ω—ã–µ –¥–∞—Ç—ã', callback_data: 'date_type_fixed' },
                  { text: '–ì–∏–±–∫–∏–µ –¥–∞—Ç—ã', callback_data: 'date_type_flexible' }
                ]
              ]
            }
          }
        );
        break;
        
      case FSM_STATES.WAITING_FIXED_START_DATE:
        try {
          const startDate = new Date(messageText);
          
          if (isNaN(startDate.getTime())) {
            throw new Error('Invalid date');
          }
          
          state.profile.startDate = startDate;
          state.profile.dateType = 'fixed';
          
          setUserState(userId, {
            ...state,
            state: FSM_STATES.WAITING_FIXED_END_DATE
          });
          
          await bot.sendMessage(
            chatId,
            `–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: ${startDate.toLocaleDateString()}.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):`
          );
        } catch (err) {
          await bot.sendMessage(
            chatId,
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-06-15'
          );
        }
        break;
        
      case FSM_STATES.WAITING_FIXED_END_DATE:
        try {
          const endDate = new Date(messageText);
          
          if (isNaN(endDate.getTime())) {
            throw new Error('Invalid date');
          }
          
          if (state.profile.startDate && endDate <= state.profile.startDate) {
            await bot.sendMessage(
              chatId,
              '–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:'
            );
            return;
          }
          
          state.profile.endDate = endDate;
          
          setUserState(userId, {
            ...state,
            state: FSM_STATES.WAITING_BUDGET
          });
          
          await bot.sendMessage(
            chatId,
            `–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è: ${endDate.toLocaleDateString()}.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):`
          );
        } catch (err) {
          await bot.sendMessage(
            chatId,
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-06-22'
          );
        }
        break;
        
      case FSM_STATES.WAITING_FLEXIBLE_MONTH:
        state.profile.flexibleMonth = messageText;
        state.profile.dateType = 'flexible';
        
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_TRIP_DURATION
        });
        
        await bot.sendMessage(
          chatId,
          `–í—ã–±—Ä–∞–Ω –≥–∏–±–∫–∏–π –ø–µ—Ä–∏–æ–¥: ${messageText}.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π):`
        );
        break;
        
      case FSM_STATES.WAITING_TRIP_DURATION:
        try {
          const duration = parseInt(messageText);
          
          if (isNaN(duration) || duration < 1) {
            throw new Error('Invalid duration');
          }
          
          state.profile.tripDuration = duration;
          
          setUserState(userId, {
            ...state,
            state: FSM_STATES.WAITING_BUDGET
          });
          
          await bot.sendMessage(
            chatId,
            `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: ${duration} –¥–Ω–µ–π.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Ä—É–±–ª—è—Ö):`
          );
        } catch (err) {
          await bot.sendMessage(
            chatId,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7)'
          );
        }
        break;
        
      case FSM_STATES.WAITING_BUDGET:
        try {
          const budget = parseInt(messageText.replace(/\s+/g, '').replace(/[^\d]/g, ''));
          
          if (isNaN(budget) || budget < 1000) {
            throw new Error('Invalid budget');
          }
          
          state.profile.budget = budget;
          
          // Initialize priorities based on vacation type
          const { getVacationTypeByKey } = await import('../config/vacationTypes');
          const vacationType = state.profile.vacationType || 'beach'; // Default to beach if not set
          const vacationTypeConfig = getVacationTypeByKey(vacationType);
          
          // Set default priorities (medium priority for all criteria of this vacation type)
          if (vacationTypeConfig) {
            const defaultPriorities: Record<string, number> = {};
            vacationTypeConfig.criteria.forEach(criterion => {
              defaultPriorities[criterion.key] = 5; // Default medium priority
            });
            state.profile.priorities = defaultPriorities;
          } else {
            // Fallback if vacation type not found
            state.profile.priorities = {
              hotelStars: 5,
              beachLine: 5,
              allInclusive: 5,
              reviews: 5,
              renovation: 5,
              animation: 5
            };
          }
          
          setUserState(userId, {
            ...state,
            state: FSM_STATES.WAITING_DEADLINE
          });
          
          await bot.sendMessage(
            chatId,
            `–ë—é–¥–∂–µ—Ç: ${budget.toLocaleString()} ‚ÇΩ.\n\n–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è (–¥–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –º—ã –∏—â–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ —Å—Ä–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω`
          );
        } catch (err) {
          await bot.sendMessage(
            chatId,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000)'
          );
        }
        break;
        
      case FSM_STATES.WAITING_DEADLINE:
        try {
          let deadline = null;
          
          if (messageText.toLowerCase() !== '–Ω–µ—Ç') {
            deadline = new Date(messageText);
            
            if (isNaN(deadline.getTime())) {
              throw new Error('Invalid date');
            }
            
            // If date is valid but time is not set (it would be 00:00 local time), 
            // set it to end of day (23:59:59) to give full day for the deadline
            if (deadline.getHours() === 0 && deadline.getMinutes() === 0) {
              deadline.setHours(23, 59, 59, 999);
            }
          }
          
          state.profile.deadline = deadline;
          
          // Save profile to storage
          await storage.createOrUpdateProfile(state.profile);
          
          // Reset state
          resetUserState(userId);
          
          // Send confirmation
          const webAppUrl = `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}`;
          
          await bot.sendMessage(
            chatId,
            `–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å —Ç—É—Ä—ã.\n\n${deadline ? `–ú—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ ${deadline.toLocaleDateString()}.` : '–ú—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏.'}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webAppUrl } }]
                ]
              }
            }
          );
          
          // Set up notification for the deadline if specified
          if (deadline) {
            scheduleTourNotification(userId, deadline);
          }
        } catch (err) {
          await bot.sendMessage(
            chatId,
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-06-30, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ä–æ–∫–∞'
          );
        }
        break;
        
      default:
        await bot.sendMessage(
          chatId,
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
        );
    }
  } catch (error) {
    console.error('Error handling message:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    );
  }
}

export async function handleCallbackQuery(
  bot: TelegramBot, 
  chatId: number, 
  userId: string, 
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  try {
    const data = callbackQuery.data;
    
    if (!data) {
      return;
    }
    
    // Acknowledge callback query
    await bot.answerCallbackQuery(callbackQuery.id);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Å–æ–≤
    if (data === 'setup_weights') {
      await showWeightsSetup(bot, chatId, userId);
      return;
    }
    
    if (data.startsWith('weight_')) {
      await handleWeightAdjustment(bot, chatId, userId, data, callbackQuery);
      return;
    }
    
    if (data === 'save_weights') {
      await bot.sendMessage(chatId, '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      return;
    }
    
    if (data === 'search_tours_now') {
      await bot.sendMessage(chatId, 'üîç –ò—â—É —Ç—É—Ä—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...');
      // TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—É—Ä—ã –≤ –≥—Ä—É–ø–ø–∞—Ö
    if (data.startsWith('vote_')) {
      await handleGroupTourVote(bot, chatId, userId, data);
      return;
    }
    
    if (data === 'start_profile') {
      // Start profile creation
      setUserState(userId, {
        state: FSM_STATES.WAITING_NAME,
        profile: {
          userId
        }
      });
      
      await bot.sendMessage(
        chatId,
        '–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
      );
    } else if (data.startsWith('vacation_type_')) {
      // Handle vacation type selection
      const state = getUserState(userId);
      const vacationType = data.replace('vacation_type_', '');
      
      if (state) {
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_COUNTRIES,
          profile: {
            ...state.profile,
            vacationType
          }
        });
        
        await bot.sendMessage(
          chatId,
          '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–∫—Ä—ã—Ç –∫–æ –≤—Å–µ–º—É":'
        );
      }
    } else if (data === 'edit_profile') {
      // Load existing profile
      const profile = await storage.getProfile(userId);
      
      if (!profile) {
        await bot.sendMessage(
          chatId,
          '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π.'
        );
        
        setUserState(userId, {
          state: FSM_STATES.WAITING_NAME,
          profile: {
            userId
          }
        });
        
        await bot.sendMessage(
          chatId,
          '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
        );
        return;
      }
      
      setUserState(userId, {
        state: FSM_STATES.WAITING_NAME,
        profile: { ...profile }
      });
      
      await bot.sendMessage(
        chatId,
        `–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –¢–µ–∫—É—â–µ–µ –∏–º—è: ${profile.name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`
      );
    } else if (data === 'show_tours') {
      // Load profile
      const profile = await storage.getProfile(userId);
      
      if (!profile) {
        await bot.sendMessage(
          chatId,
          '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.'
        );
        return;
      }
      
      await bot.sendMessage(
        chatId,
        '–ü–æ–¥–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å —Ç—É—Ä—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...'
      );
      
      // Get tours
      const tours = await getAllTours({
        userId,
        destination: profile.destination,
        startDate: profile.startDate,
        endDate: profile.endDate,
        dateType: profile.dateType,
        flexibleMonth: profile.flexibleMonth,
        tripDuration: profile.tripDuration,
        budget: profile.budget,
        priorities: profile.priorities
      });
      
      if (!tours || tours.length === 0) {
        await bot.sendMessage(
          chatId,
          '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—É—Ä—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏', callback_data: 'edit_profile' }],
                [{ text: '–ù–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/travel-buddy` } }]
              ]
            }
          }
        );
        return;
      }
      
      // Send top 3 tours
      const topTours = tours.slice(0, 3);
      
      for (const tour of topTours) {
        let message = `üè® *${tour.title}*\n`;
        message += `üìç ${tour.destination}\n`;
        message += `‚≠ê ${tour.hotelStars} –∑–≤–µ–∑–¥\n`;
        message += `üóì ${new Date(tour.startDate).toLocaleDateString()} - ${new Date(tour.endDate).toLocaleDateString()} (${tour.nights} –Ω–æ—á–µ–π)\n`;
        message += `üçΩ ${tour.mealType}\n`;
        message += `üí∞ *${tour.price.toLocaleString()} ‚ÇΩ*`;
        
        if (tour.priceOld && tour.priceOld > tour.price) {
          message += ` (—Å–∫–∏–¥–∫–∞ ${(tour.priceOld - tour.price).toLocaleString()} ‚ÇΩ)`;
        }
        
        message += `\n\nüìä –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${tour.matchScore}%`;
        
        await bot.sendPhoto(chatId, tour.image, {
          caption: message,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/tours?tour=${tour.id}` } },
                { text: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', url: tour.link }
              ]
            ]
          }
        });
      }
      
      await bot.sendMessage(
        chatId,
        `–ü–æ–∫–∞–∑–∞–Ω—ã ${topTours.length} –∏–∑ ${tours.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ –∏ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ç—É—Ä—ã', web_app: { url: `https://${process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000'}/tours` } }]
            ]
          }
        }
      );
    } else if (data.startsWith('date_type_')) {
      const state = getUserState(userId);
      
      if (!state) {
        await bot.sendMessage(
          chatId,
          '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.'
        );
        return;
      }
      
      const dateType = data.substring(10); // Remove 'date_type_' prefix
      
      if (dateType === 'fixed') {
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_FIXED_START_DATE
        });
        
        await bot.sendMessage(
          chatId,
          '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–Ω—ã–µ –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):'
        );
      } else if (dateType === 'flexible') {
        setUserState(userId, {
          ...state,
          state: FSM_STATES.WAITING_FLEXIBLE_MONTH
        });
        
        await bot.sendMessage(
          chatId,
          '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–∏–±–∫–∏–µ –¥–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ò—é–Ω—å", "–õ–µ—Ç–æ 2024", "–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"):'
        );
      }
    }
  } catch (error) {
    console.error('Error handling callback query:', error);
    await bot.sendMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
async function handleWeightAdjustment(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  data: string,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const [_, action, param] = data.split('_');
  
  if (action === 'label') {
    // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    return;
  }
  
  const [profile] = await db.select()
    .from(profiles)
    .where(eq(profiles.userId, userId))
    .limit(1);
  
  const weights = profile?.priorities || {
    starRating: 5,
    beachLine: 5,
    mealType: 5,
    price: 7,
    hotelRating: 5,
    location: 5,
    familyFriendly: 5
  };
  
  const currentValue = weights[param] || 5;
  let newValue = currentValue;
  
  if (action === 'inc' && currentValue < 10) {
    newValue = currentValue + 1;
  } else if (action === 'dec' && currentValue > 0) {
    newValue = currentValue - 1;
  }
  
  if (newValue !== currentValue) {
    weights[param] = newValue;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
    await db.update(profiles)
      .set({ priorities: weights, updatedAt: new Date() })
      .where(eq(profiles.userId, userId));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await showWeightsSetup(bot, chatId, userId);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—É—Ä –≤ –≥—Ä—É–ø–ø–µ
 */
async function handleGroupTourVote(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  data: string
): Promise<void> {
  const parts = data.split('_');
  const vote = parts[1] as 'yes' | 'no' | 'maybe';
  const tourId = parseInt(parts[2]);
  
  // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
  const [group] = await db.select()
    .from(groupProfiles)
    .where(eq(groupProfiles.chatId, chatId.toString()))
    .limit(1);
  
  if (!group) {
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –≥—Ä—É–ø–ø
  const { handleGroupVote, sendVotingSummary } = await import('../services/groups');
  
  const voteCount = await handleGroupVote(group.id, tourId, userId, vote);
  
  const voteEmojis = { yes: '‚úÖ', no: '‚ùå', maybe: 'ü§î' };
  const message = `${voteEmojis[vote]} –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!\n\n–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚úÖ –ó–∞: ${voteCount.yes}\n‚ùå –ü—Ä–æ—Ç–∏–≤: ${voteCount.no}\nü§î –ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å: ${voteCount.maybe}`;
  
  await bot.sendMessage(chatId, message);
  
  // –ï—Å–ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
  const totalVotes = voteCount.yes + voteCount.no + voteCount.maybe;
  const memberCount = (group.memberIds as string[]).length;
  
  if (totalVotes >= memberCount) {
    await sendVotingSummary(bot, chatId.toString(), group.id, tourId);
  }
}
