import TelegramBot from 'node-telegram-bot-api';
import { commandRegistry, CommandContext } from './commands';
import { handleFreeTextTourRequest, isTourSearchRequest } from './commands/text';
import { getUserState, setUserState, FSM_STATES } from './fsm';
import { handleCallbackQuery } from './callbacks';
import logger from '../utils/logger';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */
export async function handleCommand(
  bot: TelegramBot, 
  chatId: number, 
  userId: string, 
  commandText: string,
  message?: TelegramBot.Message
): Promise<void> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const parts = commandText.split(' ');
    const commandName = parts[0];
    const params = parts.slice(1);

    // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ
    const command = commandRegistry.getCommand(commandName);
    
    if (command) {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      const context: CommandContext = {
        bot,
        chatId,
        userId,
        message,
        params
      };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      await command.execute(context);
    } else {
      await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
  } catch (error) {
    logger.error(`Error handling command ${commandText}:`, error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function handleMessage(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string,
  message: TelegramBot.Message
): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = getUserState(userId);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    if (userState && userState.state !== FSM_STATES.IDLE) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ FSM (—ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ)
      await handleFSMInput(bot, chatId, userId, text, userState);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–∞
    if (isTourSearchRequest(text)) {
      await handleFreeTextTourRequest(bot, chatId, userId, text);
      return;
    }
    
    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
    await bot.sendMessage(
      chatId,
      '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –ù–∞–π—Ç–∏ —Ç—É—Ä', callback_data: 'search_tours' }],
            [{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: 'start_questionnaire' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }]
          ]
        }
      }
    );
  } catch (error) {
    logger.error('Error handling message:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
 */
export async function handleCallback(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  const chatId = callbackQuery.message?.chat.id;
  const userId = callbackQuery.from.id.toString();
  const data = callbackQuery.data;
  
  if (!chatId || !data) {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' });
    return;
  }
  
  try {
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
    await handleCallbackQuery(bot, callbackQuery);
  } catch (error) {
    logger.error('Error handling callback:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ)
 */
async function handleFSMInput(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string,
  userState: any
): Promise<void> {
  // TODO: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å FSM –ª–æ–≥–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
  // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
  logger.warn('FSM handling not yet refactored');
  await bot.sendMessage(chatId, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export * from './callbacks';
export * from './fsm';
export * from './utils';
export * from './commands';
