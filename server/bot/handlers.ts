import TelegramBot from 'node-telegram-bot-api';
import { commandRegistry, CommandContext } from './commands';
import { handleFreeTextTourRequest, isTourSearchRequest } from './commands/text';
import { getUserState, setUserState, FSM_STATES } from './fsm';
import { handleCallbackQuery } from './callbacks';
import logger from '../utils/logger';
import { 
  handleDepartureCity, 
  handleAdultsCount, 
  handleChildrenCount,
  handleChildrenAges,
  handleChildrenInfo,
    handleTripDuration,
    handleBudget,
  performTourSearch,
  startTourSearchFlow
} from './commands/searchFlow';
import { handleOnboardingStep, handleSkipPreferences } from './commands/onboarding';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */
export async function handleCommand(
  bot: TelegramBot, 
  chatId: number, 
  userId: string, 
  commandText: string,
  message?: TelegramBot.Message
): Promise<void> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const parts = commandText.split(' ');
    const commandName = parts[0];
    const params = parts.slice(1);

    // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ
    const command = commandRegistry.getCommand(commandName);
    
    if (command) {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      const context: CommandContext = {
        bot,
        chatId,
        userId,
        message,
        params
      };
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
      await command.execute(context);
    } else {
      await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
  } catch (error) {
    logger.error(`Error handling command ${commandText}:`, error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function handleMessage(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string,
  message: TelegramBot.Message
): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = getUserState(userId);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –ø–æ–∏—Å–∫–∞
    if (userState && userState.state !== FSM_STATES.IDLE) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ FSM
      await handleFSMInput(bot, chatId, userId, text, userState);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫ —Ç—É—Ä–∞
    if (isTourSearchRequest(text)) {
      await handleFreeTextTourRequest(bot, chatId, userId, text);
      return;
    }
    
    // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
    await bot.sendMessage(
      chatId,
      '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –ù–∞–π—Ç–∏ —Ç—É—Ä', callback_data: 'search_tours' }],
            [{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: 'start_questionnaire' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }]
          ]
        }
      }
    );
  } catch (error) {
    logger.error('Error handling message:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
 */
export async function handleCallback(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  try {
    if (!callbackQuery.from || !callbackQuery.data) {
      return;
    }
    
    const chatId = callbackQuery.message?.chat.id;
    if (!chatId) {
      return;
    }
    
    const userId = callbackQuery.from.id.toString();
    const data = callbackQuery.data;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∏—Å–∫–∞
    if (data.startsWith('search_')) {
      await handleSearchCallbacks(bot, chatId, userId, data, callbackQuery);
      return;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ callbacks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    await handleCallbackQuery(bot, callbackQuery);
    
  } catch (error) {
    logger.error('Error handling callback:', error);
    if (callbackQuery.message?.chat.id) {
      await bot.sendMessage(
        callbackQuery.message.chat.id,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
      );
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
 */
async function handleSearchCallbacks(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  data: string,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await bot.answerCallbackQuery(callbackQuery.id);
  
  switch (data) {
    case 'search_tours':
      // –ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
      try {
        const { db } = await import('../../db');
        const { profiles } = await import('@shared/schema');
        const { eq } = await import('drizzle-orm');
        const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId)).limit(1);
        if (!profile) {
          await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—É—Ä—ã —Ç–æ—á–Ω–µ–µ.', {
            reply_markup: {
              inline_keyboard: [[{ text: 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data: 'start_questionnaire' }]]
            }
          });
          break;
        }
      } catch {}
      await startTourSearchFlow(bot, chatId, userId, '');
      break;
    case 'search_no_children':
      await handleChildrenInfo(bot, chatId, userId, false);
      break;
      
    case 'search_has_children':
      await handleChildrenInfo(bot, chatId, userId, true);
      break;
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–≤–µ–∑–¥–Ω–æ—Å—Ç–∏
    case 'search_stars_3':
      await import('./commands/searchFlow').then(m => m.handleStarRating(bot, chatId, userId, '3'));
      break;
    case 'search_stars_4':
      await import('./commands/searchFlow').then(m => m.handleStarRating(bot, chatId, userId, '4'));
      break;
    case 'search_stars_5':
      await import('./commands/searchFlow').then(m => m.handleStarRating(bot, chatId, userId, '5'));
      break;
    case 'search_stars_any':
      await import('./commands/searchFlow').then(m => m.handleStarRating(bot, chatId, userId, 'any'));
      break;
      
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è
    case 'search_meal_ai':
      await import('./commands/searchFlow').then(m => m.handleMealType(bot, chatId, userId, 'ai'));
      break;
    case 'search_meal_bb':
      await import('./commands/searchFlow').then(m => m.handleMealType(bot, chatId, userId, 'bb'));
      break;
    case 'search_meal_hb':
      await import('./commands/searchFlow').then(m => m.handleMealType(bot, chatId, userId, 'hb'));
      break;
    case 'search_meal_fb':
      await import('./commands/searchFlow').then(m => m.handleMealType(bot, chatId, userId, 'fb'));
      break;
    case 'search_meal_any':
      await import('./commands/searchFlow').then(m => m.handleMealType(bot, chatId, userId, 'any'));
      break;
      
    case 'search_confirm':
      await performTourSearch(bot, chatId, userId);
      break;
      
    case 'search_edit':
      // –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º FSM —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await bot.sendMessage(chatId, '–ò–∑–º–µ–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ù–∞—á–Ω—ë–º —Å –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞.');
      {
        const { getUserState, FSM_STATES, setUserState } = await import('./fsm');
        const state = getUserState(userId);
        if (state?.searchData) {
          state.state = FSM_STATES.SEARCH_WAITING_DEPARTURE_CITY;
          setUserState(userId, state);
        }
        const { askDepartureCity } = await import('./commands/searchFlow');
        await askDepartureCity(bot, chatId);
      }
      break;
      
    case 'search_cancel':
      setUserState(userId, {
        state: FSM_STATES.IDLE,
        profile: { userId }
      });
      await bot.sendMessage(chatId, '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.');
      break;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
 */
async function handleFSMInput(
  bot: TelegramBot,
  chatId: number,
  userId: string,
  text: string,
  userState: any
): Promise<void> {
  const state = userState.state as FSM_STATES;
  
  // –û–Ω–±–æ—Ä–¥–∏–Ω–≥
  if ([
    FSM_STATES.WAITING_NAME,
    FSM_STATES.WAITING_VACATION_TYPE,
    FSM_STATES.WAITING_COUNTRIES,
    FSM_STATES.WAITING_BUDGET,
    FSM_STATES.WAITING_DATES,
    FSM_STATES.WAITING_DURATION,
    FSM_STATES.WAITING_TRAVELERS,
    FSM_STATES.WAITING_PREFERENCES
  ].includes(state)) {
    await handleOnboardingStep(bot, chatId, userId, text, state);
    return;
  }
  
  // –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
  switch (state) {
    case FSM_STATES.SEARCH_WAITING_DEPARTURE_CITY:
      await handleDepartureCity(bot, chatId, userId, text);
      break;
      
    case FSM_STATES.SEARCH_WAITING_ADULTS_COUNT:
      await handleAdultsCount(bot, chatId, userId, text);
      break;
      
    case FSM_STATES.SEARCH_WAITING_CHILDREN_COUNT:
      await handleChildrenCount(bot, chatId, userId, text);
      break;
      
    case FSM_STATES.SEARCH_WAITING_CHILDREN_AGES:
      await handleChildrenAges(bot, chatId, userId, text);
      break;
    case FSM_STATES.SEARCH_WAITING_DURATION:
      await handleTripDuration(bot, chatId, userId, text);
      break;
    case FSM_STATES.SEARCH_WAITING_BUDGET:
      await handleBudget(bot, chatId, userId, text);
      break;
      
    case FSM_STATES.SEARCH_WAITING_STAR_RATING:
      await import('./commands/searchFlow').then(m => m.handleStarRating(bot, chatId, userId, text));
      break;
      
    case FSM_STATES.SEARCH_WAITING_MEAL_TYPE:
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è');
      break;
      
    default:
      logger.warn(`Unhandled FSM state: ${state}`);
      await bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start'
      );
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export * from './callbacks';
export * from './fsm';
export * from './utils';
export * from './commands';
