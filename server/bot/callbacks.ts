import TelegramBot from 'node-telegram-bot-api';
import logger from '../utils/logger';
import { getUserState, setUserState, FSM_STATES } from './fsm';
import { handleGroupSetupCallback } from './commands/groupsetup';
import { handleJoinCallback } from './commands/join';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
 */
export async function handleCallbackQuery(
  bot: TelegramBot,
  callbackQuery: TelegramBot.CallbackQuery
): Promise<void> {
  try {
    const chatId = callbackQuery.message?.chat.id;
    const userId = callbackQuery.from.id.toString();
    const data = callbackQuery.data;

    if (!chatId || !data) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = getUserState(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
    if (data.startsWith('group_setup_')) {
      await handleGroupSetupCallback(bot, callbackQuery);
    } else if (data.startsWith('join_group_')) {
      await handleJoinCallback(bot, callbackQuery);
    } else if (data === 'skip_onboarding') {
      // –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      await setUserState(userId, FSM_STATES.IDLE);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω' });
      await bot.sendMessage(
        chatId, 
        '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏!'
      );
    } else if (data === 'search_tours') {
      // –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
      await setUserState(userId, FSM_STATES.WAITING_FOR_TOUR_REQUEST);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫' });
      await bot.sendMessage(
        chatId,
        'üîç –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç—É—Ä –≤—ã –∏—â–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n' +
        '‚Ä¢ "–•–æ—á—É –≤ –¢—É—Ä—Ü–∏—é –Ω–∞ –Ω–µ–¥–µ–ª—é, –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ"\n' +
        '‚Ä¢ "–ò—â—É —Ç—É—Ä –≤ –ï–≥–∏–ø–µ—Ç –¥–æ 100 —Ç—ã—Å—è—á –Ω–∞ –¥–≤–æ–∏—Ö"\n' +
        '‚Ä¢ "–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏ —É –º–æ—Ä—è"'
      );
    } else if (data === 'my_profile') {
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å' });
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
      await bot.sendMessage(
        chatId,
        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.'
      );
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
      logger.warn(`Unknown callback data: ${data}`);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
    }

  } catch (error) {
    logger.error('Error handling callback query:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}