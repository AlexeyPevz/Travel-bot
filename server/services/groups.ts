import { db } from '../../db';
import { groupProfiles, profiles, groupTourVotes, tours, monitoringTasks } from '@shared/schema';
import { eq, and, inArray } from 'drizzle-orm';
import TelegramBot from 'node-telegram-bot-api';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
 */
export async function createOrUpdateGroupProfile(
  chatId: string,
  chatTitle: string,
  memberIds: string[]
) {
  const [existingGroup] = await db.select()
    .from(groupProfiles)
    .where(eq(groupProfiles.chatId, chatId))
    .limit(1);

  if (existingGroup) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    await db.update(groupProfiles)
      .set({
        chatTitle,
        memberIds,
        isActive: true,
        updatedAt: new Date()
      })
      .where(eq(groupProfiles.chatId, chatId));
    
    return existingGroup.id;
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    const [newGroup] = await db.insert(groupProfiles)
      .values({
        chatId,
        chatTitle,
        memberIds,
        isActive: true
      })
      .returning();
    
    return newGroup.id;
  }
}

/**
 * –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
 */
export async function aggregateGroupProfiles(groupId: number) {
  const [group] = await db.select()
    .from(groupProfiles)
    .where(eq(groupProfiles.id, groupId))
    .limit(1);

  if (!group) return;

  const memberIds = group.memberIds as string[];
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const memberProfiles = await db.select()
    .from(profiles)
    .where(inArray(profiles.userId, memberIds));

  if (memberProfiles.length === 0) return;

  // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const aggregatedProfile: any = {
    countries: [],
    budget: 0,
    startDate: null,
    endDate: null,
    tripDuration: 0,
    vacationType: null
  };

  const aggregatedPriorities: Record<string, number> = {};
  const priorityKeys = [
    'starRating', 'beachLine', 'mealType', 'price',
    'hotelRating', 'location', 'familyFriendly'
  ];

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
  const allCountries = new Set<string>();
  memberProfiles.forEach(profile => {
    if (profile.countries) {
      (profile.countries as string[]).forEach(c => allCountries.add(c));
    }
  });
  aggregatedProfile.countries = Array.from(allCountries);

  // –°—Ä–µ–¥–Ω–∏–π –±—é–¥–∂–µ—Ç
  const budgets = memberProfiles
    .filter(p => p.budget)
    .map(p => p.budget!);
  if (budgets.length > 0) {
    aggregatedProfile.budget = Math.round(
      budgets.reduce((a, b) => a + b, 0) / budgets.length
    ) * memberIds.length; // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  }

  // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∞—Ç
  const startDates = memberProfiles
    .filter(p => p.startDate)
    .map(p => p.startDate!.getTime());
  const endDates = memberProfiles
    .filter(p => p.endDate)
    .map(p => p.endDate!.getTime());

  if (startDates.length > 0) {
    aggregatedProfile.startDate = new Date(Math.max(...startDates));
  }
  if (endDates.length > 0) {
    aggregatedProfile.endDate = new Date(Math.min(...endDates));
  }

  // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const durations = memberProfiles
    .filter(p => p.tripDuration)
    .map(p => p.tripDuration!);
  if (durations.length > 0) {
    aggregatedProfile.tripDuration = Math.round(
      durations.reduce((a, b) => a + b, 0) / durations.length
    );
  }

  // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
  priorityKeys.forEach(key => {
    const values: number[] = [];
    memberProfiles.forEach(profile => {
      if (profile.priorities && (profile.priorities as any)[key]) {
        values.push((profile.priorities as any)[key]);
      }
    });
    if (values.length > 0) {
      aggregatedPriorities[key] = Math.round(
        values.reduce((a, b) => a + b, 0) / values.length
      );
    } else {
      aggregatedPriorities[key] = 5; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  await db.update(groupProfiles)
    .set({
      aggregatedProfile,
      aggregatedPriorities,
      updatedAt: new Date()
    })
    .where(eq(groupProfiles.id, groupId));

  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
  await db.insert(monitoringTasks)
    .values({
      groupId,
      taskType: 'group_monitor',
      nextRunAt: new Date(Date.now() + 30 * 60 * 1000), // –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
      status: 'active'
    })
    .onConflictDoNothing();

  return { aggregatedProfile, aggregatedPriorities };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—É—Ä
 */
export async function handleGroupVote(
  groupId: number,
  tourId: number,
  userId: string,
  vote: 'yes' | 'no' | 'maybe',
  comment?: string
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const [existingVote] = await db.select()
    .from(groupTourVotes)
    .where(
      and(
        eq(groupTourVotes.groupId, groupId),
        eq(groupTourVotes.tourId, tourId),
        eq(groupTourVotes.userId, userId)
      )
    )
    .limit(1);

  if (existingVote) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    await db.update(groupTourVotes)
      .set({ vote, comment })
      .where(eq(groupTourVotes.id, existingVote.id));
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å
    await db.insert(groupTourVotes)
      .values({
        groupId,
        tourId,
        userId,
        vote,
        comment
      });
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
  const votes = await db.select()
    .from(groupTourVotes)
    .where(
      and(
        eq(groupTourVotes.groupId, groupId),
        eq(groupTourVotes.tourId, tourId)
      )
    );

  const voteCount = {
    yes: votes.filter(v => v.vote === 'yes').length,
    no: votes.filter(v => v.vote === 'no').length,
    maybe: votes.filter(v => v.vote === 'maybe').length
  };

  return voteCount;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
 */
export async function getVoteResults(groupId: number, tourId: number) {
  const votes = await db.select()
    .from(groupTourVotes)
    .where(
      and(
        eq(groupTourVotes.groupId, groupId),
        eq(groupTourVotes.tourId, tourId)
      )
    );

  const [tour] = await db.select()
    .from(tours)
    .where(eq(tours.id, tourId))
    .limit(1);

  const [group] = await db.select()
    .from(groupProfiles)
    .where(eq(groupProfiles.id, groupId))
    .limit(1);

  const memberCount = (group?.memberIds as string[])?.length || 0;

  const results = {
    tour: tour?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä',
    totalVotes: votes.length,
    totalMembers: memberCount,
    votes: {
      yes: votes.filter(v => v.vote === 'yes').length,
      no: votes.filter(v => v.vote === 'no').length,
      maybe: votes.filter(v => v.vote === 'maybe').length
    },
    percentage: {
      yes: memberCount > 0 ? Math.round((votes.filter(v => v.vote === 'yes').length / memberCount) * 100) : 0,
      no: memberCount > 0 ? Math.round((votes.filter(v => v.vote === 'no').length / memberCount) * 100) : 0,
      maybe: memberCount > 0 ? Math.round((votes.filter(v => v.vote === 'maybe').length / memberCount) * 100) : 0
    },
    comments: votes.filter(v => v.comment).map(v => ({
      userId: v.userId,
      vote: v.vote,
      comment: v.comment
    }))
  };

  return results;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
 */
export async function sendVotingSummary(bot: TelegramBot, chatId: string, groupId: number, tourId: number) {
  const results = await getVoteResults(groupId, tourId);
  
  let message = `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ç—É—Ä:\n${results.tour}\n\n`;
  message += `–í—Å–µ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${results.totalVotes} –∏–∑ ${results.totalMembers}\n\n`;
  message += `‚úÖ –ó–∞: ${results.votes.yes} (${results.percentage.yes}%)\n`;
  message += `‚ùå –ü—Ä–æ—Ç–∏–≤: ${results.votes.no} (${results.percentage.no}%)\n`;
  message += `ü§î –ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å: ${results.votes.maybe} (${results.percentage.maybe}%)\n`;

  if (results.comments.length > 0) {
    message += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n`;
    results.comments.forEach(c => {
      const voteEmoji = c.vote === 'yes' ? '‚úÖ' : c.vote === 'no' ? '‚ùå' : 'ü§î';
      message += `${voteEmoji} ${c.comment}\n`;
    });
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤
  if (results.percentage.yes >= 70) {
    message += `\n‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢—É—Ä –ø–æ–ª—É—á–∏–ª –≤—ã—Å–æ–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.`;
  } else if (results.percentage.yes >= 50) {
    message += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã. –°—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.`;
  } else {
    message += `\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∏–∑–∫–∞—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.`;
  }

  await bot.sendMessage(chatId, message);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –ø—Ä–æ—Ñ–∏–ª–∏
 */
export async function checkGroupMembersProfiles(memberIds: string[]) {
  const existingProfiles = await db.select()
    .from(profiles)
    .where(inArray(profiles.userId, memberIds));

  const existingUserIds = existingProfiles.map(p => p.userId);
  const missingUserIds = memberIds.filter(id => !existingUserIds.includes(id));

  return {
    complete: missingUserIds.length === 0,
    existingProfiles,
    missingUserIds
  };
}