import { db } from '@db';
import { 
  backgroundSearches, 
  backgroundSearchResults, 
  searchRequests, 
  notifications,
  tours,
  NotifyConditions,
  SearchRequest,
  Tour
} from '@shared/schema-v2';
import { eq, and, gte, lte, inArray, sql, desc } from 'drizzle-orm';
import { searchTours } from '../providers';
import { rankTours } from './smart-tour-ranking';
import logger from '../utils/logger';
import { sendNotification } from './notification-service';

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç—É—Ä–æ–≤
 */
export async function createBackgroundSearch(
  searchRequestId: number,
  userId: string,
  monitorUntil: Date,
  conditions?: Partial<NotifyConditions>
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const existing = await db.select()
      .from(backgroundSearches)
      .where(
        and(
          eq(backgroundSearches.searchRequestId, searchRequestId),
          eq(backgroundSearches.isActive, true)
        )
      )
      .limit(1);

    if (existing.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      await db.update(backgroundSearches)
        .set({
          monitorUntil,
          notifyConditions: conditions || existing[0].notifyConditions,
          updatedAt: new Date()
        })
        .where(eq(backgroundSearches.id, existing[0].id));
      
      return existing[0].id;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    const [created] = await db.insert(backgroundSearches).values({
      searchRequestId,
      userId,
      monitorUntil,
      notifyConditions: conditions || {
        notifyNewTours: true,
        priceDropPercent: 10,
        minMatchScore: 70
      }
    }).returning();

    logger.info(`Created background search ${created.id} for user ${userId}`);
    return created.id;
  } catch (error) {
    logger.error('Error creating background search:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ–∏—Å–∫–∏
 */
export async function checkBackgroundSearches() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    const activeSearches = await db.select({
      backgroundSearch: backgroundSearches,
      searchRequest: searchRequests
    })
    .from(backgroundSearches)
    .innerJoin(searchRequests, eq(backgroundSearches.searchRequestId, searchRequests.id))
    .where(
      and(
        eq(backgroundSearches.isActive, true),
        eq(backgroundSearches.isPaused, false),
        gte(backgroundSearches.monitorUntil, new Date())
      )
    );

    logger.info(`Checking ${activeSearches.length} background searches`);

    for (const { backgroundSearch, searchRequest } of activeSearches) {
      try {
        await checkSingleBackgroundSearch(backgroundSearch, searchRequest);
      } catch (error) {
        logger.error(`Error checking background search ${backgroundSearch.id}:`, error);
      }
    }
  } catch (error) {
    logger.error('Error in background searches check:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
async function checkSingleBackgroundSearch(
  bgSearch: typeof backgroundSearches.$inferSelect,
  searchRequest: SearchRequest
) {
  const startTime = Date.now();
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    if (isQuietHours(bgSearch.notifyConditions as NotifyConditions)) {
      logger.debug(`Skipping search ${bgSearch.id} - quiet hours`);
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const searchParams = {
      destination: searchRequest.destination?.[0] || '–¢—É—Ä—Ü–∏—è',
      startDate: searchRequest.startDate || undefined,
      endDate: searchRequest.endDate || undefined,
      flexibleMonth: searchRequest.flexibleMonth || undefined,
      tripDuration: searchRequest.duration || undefined,
      budget: searchRequest.budget || undefined,
      departureCity: (searchRequest as any).departureCity || '–ú–æ—Å–∫–≤–∞',
      adults: searchRequest.adults || 2,
      children: searchRequest.children || 0,
      childrenAges: searchRequest.childrenAges as number[] || []
    };

    const foundTours = await searchTours(searchParams);
    
    // –†–∞–Ω–∂–∏—Ä—É–µ–º —Ç—É—Ä—ã
    const rankedTours = searchRequest.priorities 
      ? rankTours(foundTours, searchRequest, searchRequest.priorities)
      : foundTours.map(tour => ({ tour, score: 50, breakdown: {} as any }));

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const previousResults = await db.select()
      .from(backgroundSearchResults)
      .where(eq(backgroundSearchResults.backgroundSearchId, bgSearch.id))
      .orderBy(desc(backgroundSearchResults.foundAt));

    const previousTourIds = new Set(previousResults.map(r => r.tourId));
    const previousPrices = new Map(previousResults.map(r => [r.tourId, r.price]));

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const notifications: Array<{
      tour: Tour;
      reason: string;
      priceChange?: number;
      score: number;
    }> = [];

    const conditions = bgSearch.notifyConditions as NotifyConditions || {};

    for (const { tour, score } of rankedTours) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score
      if (conditions.minMatchScore && score < conditions.minMatchScore) {
        continue;
      }

      // –ù–æ–≤—ã–π —Ç—É—Ä
      if (conditions.notifyNewTours && !previousTourIds.has(tour.id)) {
        notifications.push({
          tour,
          reason: 'new_tour',
          score
        });
        continue;
      }

      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
      const previousPrice = previousPrices.get(tour.id);
      if (previousPrice) {
        const priceChange = previousPrice - tour.price;
        const priceChangePercent = (priceChange / previousPrice) * 100;

        if (
          (conditions.priceDropAmount && priceChange >= conditions.priceDropAmount) ||
          (conditions.priceDropPercent && priceChangePercent >= conditions.priceDropPercent) ||
          (conditions.priceBelowThreshold && tour.price <= conditions.priceBelowThreshold)
        ) {
          notifications.push({
            tour,
            reason: 'price_drop',
            priceChange,
            score
          });
        }
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const maxNotifications = conditions.onlyTopMatches ? 3 : (conditions.maxNotificationsPerDay || 10);
    const topNotifications = notifications
      .sort((a, b) => b.score - a.score)
      .slice(0, maxNotifications);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const notification of topNotifications) {
      const { tour, reason, priceChange, score } = notification;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const [result] = await db.insert(backgroundSearchResults).values({
        backgroundSearchId: bgSearch.id,
        tourId: tour.id,
        price: tour.price,
        priceChange,
        availability: tour.availability,
        notificationReason: reason
      }).returning();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await sendBackgroundSearchNotification(
        bgSearch.userId,
        bgSearch.id,
        tour,
        reason,
        priceChange,
        score
      );

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–µ
      await db.update(backgroundSearchResults)
        .set({
          isNotified: true,
          notifiedAt: new Date()
        })
        .where(eq(backgroundSearchResults.id, result.id));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.update(backgroundSearches)
      .set({
        lastCheckedAt: new Date(),
        checksCount: sql`${backgroundSearches.checksCount} + 1`,
        notificationsCount: sql`${backgroundSearches.notificationsCount} + ${topNotifications.length}`,
        lastNotificationAt: topNotifications.length > 0 ? new Date() : bgSearch.lastNotificationAt,
        updatedAt: new Date()
      })
      .where(eq(backgroundSearches.id, bgSearch.id));

    const duration = Date.now() - startTime;
    logger.info(`Background search ${bgSearch.id} completed in ${duration}ms, sent ${topNotifications.length} notifications`);

  } catch (error) {
    logger.error(`Error in background search ${bgSearch.id}:`, error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç—É—Ä–µ
 */
async function sendBackgroundSearchNotification(
  userId: string,
  backgroundSearchId: number,
  tour: Tour,
  reason: string,
  priceChange?: number,
  score?: number
) {
  let title = '';
  let message = '';

  switch (reason) {
    case 'new_tour':
      title = 'üÜï –ù–æ–≤—ã–π —Ç—É—Ä –Ω–∞–π–¥–µ–Ω!';
      message = `–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç—É—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:\n\n`;
      break;
    
    case 'price_drop':
      const dropAmount = priceChange ? priceChange.toLocaleString('ru-RU') : '';
      title = `üí∞ –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ ${dropAmount} ‚ÇΩ!`;
      message = `–¶–µ–Ω–∞ –Ω–∞ —Ç—É—Ä —Å–Ω–∏–∑–∏–ª–∞—Å—å:\n\n`;
      break;
    
    case 'availability_change':
      title = '‚úÖ –¢—É—Ä —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!';
      message = `–¢—É—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–∫–∞–ª–∏, —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω:\n\n`;
      break;
  }

  message += `üè® ${tour.hotel} ${tour.hotelStars}‚≠ê\n`;
  message += `üìç ${tour.destination}\n`;
  message += `üíµ ${tour.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
  
  if (tour.startDate && tour.endDate) {
    message += `üìÖ ${new Date(tour.startDate).toLocaleDateString('ru-RU')} - ${new Date(tour.endDate).toLocaleDateString('ru-RU')}\n`;
  }
  
  if (tour.mealType) {
    message += `üç¥ ${tour.mealType}\n`;
  }
  
  if (score) {
    message += `\nüéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${Math.round(score)}%`;
  }

  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const [notification] = await db.insert(notifications).values({
    userId,
    type: 'background_search',
    sourceId: backgroundSearchId,
    title,
    message,
    data: {
      tourId: tour.id,
      reason,
      priceChange,
      score
    },
    actionUrl: tour.link,
    actionData: {
      callback: `view_bg_tour_${tour.id}`,
      tourId: tour.id
    }
  }).returning();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  await sendNotification(notification.id);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö
 */
function isQuietHours(conditions: NotifyConditions): boolean {
  if (!conditions.quietHours) return false;

  const now = new Date();
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();
  const currentTime = currentHour * 60 + currentMinute;

  const [startHour, startMinute] = conditions.quietHours.start.split(':').map(Number);
  const [endHour, endMinute] = conditions.quietHours.end.split(':').map(Number);
  
  const startTime = startHour * 60 + startMinute;
  const endTime = endHour * 60 + endMinute;

  if (startTime <= endTime) {
    // –¢–∏—Ö–∏–µ —á–∞—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
    return currentTime >= startTime && currentTime < endTime;
  } else {
    // –¢–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    return currentTime >= startTime || currentTime < endTime;
  }
}

/**
 * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
export async function pauseBackgroundSearch(backgroundSearchId: number, userId: string) {
  await db.update(backgroundSearches)
    .set({
      isPaused: true,
      updatedAt: new Date()
    })
    .where(
      and(
        eq(backgroundSearches.id, backgroundSearchId),
        eq(backgroundSearches.userId, userId)
      )
    );
}

/**
 * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
export async function resumeBackgroundSearch(backgroundSearchId: number, userId: string) {
  await db.update(backgroundSearches)
    .set({
      isPaused: false,
      updatedAt: new Date()
    })
    .where(
      and(
        eq(backgroundSearches.id, backgroundSearchId),
        eq(backgroundSearches.userId, userId)
      )
    );
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
 */
export async function stopBackgroundSearch(backgroundSearchId: number, userId: string) {
  await db.update(backgroundSearches)
    .set({
      isActive: false,
      updatedAt: new Date()
    })
    .where(
      and(
        eq(backgroundSearches.id, backgroundSearchId),
        eq(backgroundSearches.userId, userId)
      )
    );
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserBackgroundSearches(userId: string) {
  return await db.select({
    backgroundSearch: backgroundSearches,
    searchRequest: searchRequests
  })
  .from(backgroundSearches)
  .innerJoin(searchRequests, eq(backgroundSearches.searchRequestId, searchRequests.id))
  .where(
    and(
      eq(backgroundSearches.userId, userId),
      eq(backgroundSearches.isActive, true)
    )
  )
  .orderBy(desc(backgroundSearches.createdAt));
}