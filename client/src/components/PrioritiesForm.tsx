import React, { useState } from 'react';
import PrioritySlider from './PrioritySlider';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useMutation } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';

interface PrioritiesFormProps {
  userId: string;
  priorities: Record<string, number>;
}

const defaultPriorities = {
  starRating: 5,
  beachLine: 5,
  mealType: 5,
  price: 7,
  hotelRating: 5,
  location: 5,
  familyFriendly: 5
};

const priorityConfig = [
  {
    key: 'starRating',
    label: '–ó–≤–µ–∑–¥–Ω–æ—Å—Ç—å –æ—Ç–µ–ª—è',
    icon: '‚≠ê',
    description: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è (3*, 4*, 5*)'
  },
  {
    key: 'beachLine',
    label: '–õ–∏–Ω–∏—è –ø–ª—è–∂–∞',
    icon: 'üèñ',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–æ—Ä—è'
  },
  {
    key: 'mealType',
    label: '–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è',
    icon: 'üçΩ',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–∏—Ç–∞–Ω–∏—è (–≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ, –ø–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω –∏ —Ç.–¥.)'
  },
  {
    key: 'price',
    label: '–¶–µ–Ω–∞',
    icon: 'üí∞',
    description: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–∞'
  },
  {
    key: 'hotelRating',
    label: '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è',
    icon: 'üìä',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫ –¥—Ä—É–≥–∏—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤'
  },
  {
    key: 'location',
    label: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
    icon: 'üìç',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å —É–¥–æ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–µ–ª—è'
  },
  {
    key: 'familyFriendly',
    label: '–î–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏',
    icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    description: '–í–∞–∂–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π'
  }
];

export default function PrioritiesForm({ userId, priorities: initialPriorities }: PrioritiesFormProps) {
  const { toast } = useToast();
  const [priorities, setPriorities] = useState<Record<string, number>>({
    ...defaultPriorities,
    ...initialPriorities
  });

  const saveMutation = useMutation({
    mutationFn: async (data: Record<string, number>) => {
      const response = await fetch('/api/profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, priorities: data })
      });
      if (!response.ok) throw new Error('Failed to save priorities');
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        description: '–í–µ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
      });
    },
    onError: () => {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive'
      });
    }
  });

  const handlePriorityChange = (key: string, value: number) => {
    setPriorities(prev => ({ ...prev, [key]: value }));
  };

  const handleSave = () => {
    saveMutation.mutate(priorities);
  };

  const handleReset = () => {
    setPriorities(defaultPriorities);
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</CardTitle>
          <CardDescription>
            –û—Ü–µ–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—Ç 0 –¥–æ 10. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—É—Ä—ã, 
            –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {priorityConfig.map(({ key, label, icon, description }) => (
            <PrioritySlider
              key={key}
              label={label}
              icon={icon}
              value={priorities[key] || 5}
              onChange={(value) => handlePriorityChange(key, value)}
              description={description}
            />
          ))}
        </CardContent>
      </Card>

      <div className="flex gap-3">
        <Button 
          onClick={handleSave} 
          className="flex-1 bg-telegram-blue hover:bg-blue-600"
          disabled={saveMutation.isPending}
        >
          {saveMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </Button>
        <Button 
          onClick={handleReset} 
          variant="outline"
          className="text-gray-600"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </Button>
      </div>
    </div>
  );
}