import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const apiKey = process.env.LEVELTRAVEL_API_KEY;
const partnerId = process.env.LEVEL_TRAVEL_PARTNER;
const affiliateUrl = process.env.LEVEL_TRAVEL_AFFILIATE_URL;

const headers = {
  'Authorization': `Token token="${apiKey}"`,
  'Accept': 'application/vnd.leveltravel.v3',
  'Content-Type': 'application/json'
};

async function analyzeHotelStructure() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ (22 –∞–≤–≥—É—Å—Ç–∞ 2025)
    const searchParams = {
      from_city: 'Moscow',
      to_country: 'TR',
      nights: 7,
      adults: 2,
      start_date: '22.08.2025'
    };
    
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫...\n');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    const enqueueResponse = await axios.post(
      'https://api.level.travel/search/enqueue',
      searchParams,
      { headers }
    );
    
    const requestId = enqueueResponse.data.request_id;
    console.log('Request ID:', requestId);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    console.log('–û–∂–∏–¥–∞–µ–º 5 —Å–µ–∫—É–Ω–¥...\n');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–µ–ª–∏
    const hotelsResponse = await axios.get(
      `https://api.level.travel/search/get_grouped_hotels?request_id=${requestId}`,
      { headers }
    );
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:\n');
    console.log('–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:', Object.keys(hotelsResponse.data));
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π:', hotelsResponse.data.hotels?.length || 0);
    
    if (hotelsResponse.data.hotels && hotelsResponse.data.hotels.length > 0) {
      const firstHotel = hotelsResponse.data.hotels[0];
      
      console.log('\nüì± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è:');
      console.log('–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof firstHotel);
      
      if (typeof firstHotel === 'object') {
        console.log('–ö–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–µ–ª—è:', Object.keys(firstHotel));
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è
        console.log('\n–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–µ–ª—è:');
        console.log(JSON.stringify(firstHotel, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (firstHotel.variants) {
          console.log('\nüè∑Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (variants):');
          console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', firstHotel.variants.length);
          if (firstHotel.variants[0]) {
            console.log('–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:', JSON.stringify(firstHotel.variants[0], null, 2));
          }
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
        console.log('\nüîó –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏:');
        
        // –ò—â–µ–º ID –æ—Ç–µ–ª—è –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        const hotelId = firstHotel.hotel_id || firstHotel.id || firstHotel.variants?.[0]?.hotel_id;
        const hotelName = firstHotel.hotel_name || firstHotel.name || firstHotel.variants?.[0]?.hotel_name;
        const price = firstHotel.min_price || firstHotel.variants?.[0]?.price;
        
        console.log('ID –æ—Ç–µ–ª—è:', hotelId);
        console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', hotelName);
        console.log('–¶–µ–Ω–∞:', price);
        
        if (hotelId) {
          const partnerLink = `${affiliateUrl}&hotel_id=${hotelId}&marker=${partnerId}&start_date=22.08.2025&nights=7&adults=2`;
          console.log('–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:', partnerLink);
        }
      }
    }
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π
    if (hotelsResponse.data.filtered_hotels) {
      console.log('\nüìä –ï—Å—Ç—å —Ç–∞–∫–∂–µ filtered_hotels:');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', hotelsResponse.data.filtered_hotels.length);
      if (hotelsResponse.data.filtered_hotels[0]) {
        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:', Object.keys(hotelsResponse.data.filtered_hotels[0]));
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.log('–î–µ—Ç–∞–ª–∏:', error.response.data);
    }
  }
}

analyzeHotelStructure();