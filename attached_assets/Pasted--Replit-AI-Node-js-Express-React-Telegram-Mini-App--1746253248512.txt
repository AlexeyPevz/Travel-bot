Создай в Replit проект «AI-турагент» на Node.js/Express + React (Telegram Mini App), со следующей структурой и полной логикой:

1. Общая структура
   - Папка `/src`:
     - `/bot` — логика Telegram-бота
     - `/webapp` — фронтенд Mini App (React/Vite или Create React App)
     - `/providers` — парсеры туров (модульные провайдеры)
     - `/services` — бизнес-логика (агрегатор туров, мэтчинг, дедлайны, попутчики, уведомления)
     - `index.js` — точка входа для Express-сервера и запуска бота
   - `package.json`, `.replit`, `README.md`

2. Бэкенд (Express + Telegram Bot API)
   - Запуск Express на `process.env.PORT`
   - Подключение `node-telegram-bot-api` с polling
   - Переменные окружения: `TELEGRAM_TOKEN`, `SUPABASE_URL`, `SUPABASE_KEY`, `OPENAI_API_KEY`

3. Сохранение данных
   - Использовать `@supabase/supabase-js`
   - Таблицы:
     - `profiles` (user_id, имя, приоритеты, бюджет, даты или «гибкий»)
     - `group_profiles` (chat_id, [user_id,…], общий профиль)
     - `watchlists` (запросы без дат — “мечты”)
     - `tours` (id, provider, данные тура, индекс соответствия)
     - `bookings` (user_id, tour_id, статус)
     - `poputchik_requests` (user_id, параметры, статус, match_id)
   - Вся работа с БД через единый модуль `src/services/db.js`

4. Telegram-бот (`src/bot/bot.js`)
   - Обработка `/start`:
     - Приветствие, кнопка «Заполнить анкету»
     - Генерация уникального реферального deep-link `?start=ref_<код>`
   - Анкета:
     - Сериализация шагов в FSM: выбор направления, дат/гибкий режим, длительность, бюджет, приоритеты (звёздность, линия, питание, отзывы, реновация, анимация и т.п. — slider 0–10)
     - Сохранение в `profiles`
     - После анкеты — кнопка «Открыть Mini App»
   - Кнопка «Открыть Mini App» отправляет `WebApp.open()` с URL `https://<repl>.repl.co/webapp`
   - Логика дедлайна:
     - Позволяет задать «срок ожидания»: после сохранения анкеты — сообщение «До какого числа ждать?»
     - Сохраняет `deadline` в профиле
     - Background job: проверка дедлайна и выполнение Plan B
   - Кнопки в сообщениях туров: «Подробнее», «Бронировать» (открывает CPA-ссылку), «Сравнить», «Отклонить»
   - Команды:
     - `/myrequests` — список активных watchlists и дедлайнов
     - `/referral` — статистика приглашений и бонусы

5. Telegram Mini App (`src/webapp`)
   - React-приложение с Telegram WebApp SDK:
     - Инициализация `Telegram.WebApp.initDataUnsafe()`
     - Страница анкеты (альтернативная визуальная форма)
     - Страница подборки туров: 
       - Вызов `GET /api/tours?user_id=…`
       - Карточки туров с фото, ценой, рейтингом, кнопками действий
     - Страница «Мои желания» (watchlists) и «Группы» (invite bot to chat)
   - При сабмите формы:
     - POST `/api/submit-profile` или `/api/submit-watchlist`
     - Сохраняет данные, закрывает Mini App: `Telegram.WebApp.close()`

6. Модуль парсеров туров (`src/providers`)
   - Каждый файл экспортирует `async function fetchTours({budget, dates, region, priorities})`
   - Возвращает массив `{ id, provider, title, price, rating, link, image, metadata… }`
   - В корне `/src/providers/index.js` – регистрирует все провайдеры в массиве

7. Агрегация туров (`src/services/toursService.js`)
   - Функция `getAllTours(query)`:
     - Собирает результаты от всех провайдеров
     - Для каждого тура:
       - Вычисляет индекс соответствия через GPT: вызывает OpenAI API с промптом, учитывающим профиль пользователя
     - Сортирует по индексу
     - Сохраняет топ-N в таблицу `tours`
     - Возвращает результаты

8. Уведомления и планировщики (job runner)
   - В `src/services/scheduler.js`:
     - Еженечные/ежедневные проверки новых туров для каждого профиля и watchlist
     - Проверка дедлайнов и запуск Plan B (расширение даты/бюджета/новые страны)
   - При нахождении туров выше порога (например, ≥85):
     - Бот шлёт личное сообщение `sendMessage` или в group chat, если профиль групповой
     - В групповых чатах: объединяет профили участников и шлёт единый запрос

9. Поиск попутчиков
   - Если в `getAllTours` ничего не нашлось под один профиль — в ответ предлагает «Найти попутчика»
   - Запись в `poputchik_requests`
   - Фоновые задачи по мэтчингу: 
     - Сравнивает параметры (направление, даты, стиль, возраст, пол) и вычисляет compatibility score
     - При mutual opt-in отправляет каждому профиль попутчика с кнопкой «Принять → открыть общий чат»

10. Сопровождение после бронирования (`src/services/postBooking.js`)
    - При создании `bookings` шлёт серию сообщений:
      - Чек-лист за 14, 7, 2 дня до вылета (passport, страховка, аптечка, зарядки и т. д.)
      - Инфо по стране (валидные визы, валюта, правила)
      - Подборки экскурсий с CPA-ссылками
      - Напоминание про регистрацию на рейс за 24 ч, за 3 ч до вылета
      - После возвращения — запрос фидбэка и «Запланировать следующий отпуск»

11. Реферальная программа
    - Генерация deep-link `?start=ref_{userId}`
    - Учёт в `profiles.referrer`
    - Начисление бонусов в Supabase и уведомление о достигнутом уровне

12. Групповой режим
    - Обработка новых участников чата: если бот добавлен в группу, реагирует на команду `/join`, сохраняет `chat_id`
    - Команда `/groupsetup` запускает сбор анкет для всех участников через Mini App
    - Генерация агрегированного профиля и совместный мониторинг

13. Endpoint-ы и маршруты
    - `POST /api/submit-profile`
    - `POST /api/submit-watchlist`
    - `GET  /api/tours`
    - `GET  /api/poputchik`
    - `POST /api/join-group`
    - `GET  /api/referrals`
    - `GET  /api/bookings`
    - `POST /api/feedback`

14. Документация
    - В `README.md` — инструкции по установке, переменным окружения, подключению Supabase и OpenAI, добавлению новых провайдеров в `/providers`.

Сгенерируй полный код по этой спецификации, чтобы сразу можно было:
- запускать бота,
- открывать Mini App,
- подключать новые API-парсеры (достаточно добавить файл в `/src/providers`),
- и реализовывать все обсуждённые фичи: анкеты, дедлайны, группы, попутчики, рефералка, сопровождение после брони.
